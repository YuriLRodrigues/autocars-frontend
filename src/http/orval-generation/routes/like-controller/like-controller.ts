/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Auto Cars - Backend
 * Cars seller API
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import { customFetch } from '../../../custom-instance-fetch'
import type {
  HandleAdvertisementLikeResponseDto,
  HandleFeedbackLikeResponseDto,
  SwaggerBadRequestDto,
  SwaggerResourceNotFoundDto,
} from '../../schemas'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const getFindAdIsLikedUrl = (id: string) => {
  return `http://localhost:3333/like/ad/${id}`
}

export const findAdIsLiked = async (id: string, options?: RequestInit): Promise<boolean> => {
  return customFetch<boolean>(getFindAdIsLikedUrl(id), {
    ...options,
    method: 'GET',
  })
}

export const getFindAdIsLikedQueryKey = (id: string) => {
  return [`http://localhost:3333/like/ad/${id}`] as const
}

export const getFindAdIsLikedInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findAdIsLiked>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdIsLiked>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAdIsLikedQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAdIsLiked>>> = ({ signal }) =>
    findAdIsLiked(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findAdIsLiked>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAdIsLikedInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findAdIsLiked>>>
export type FindAdIsLikedInfiniteQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAdIsLikedInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdIsLiked>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdIsLiked>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findAdIsLiked>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdIsLikedInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdIsLiked>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdIsLiked>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAdIsLiked>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdIsLikedInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdIsLiked>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdIsLiked>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAdIsLikedInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdIsLiked>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdIsLiked>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAdIsLikedInfiniteQueryOptions(id, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAdIsLikedQueryOptions = <
  TData = Awaited<ReturnType<typeof findAdIsLiked>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdIsLiked>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAdIsLikedQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAdIsLiked>>> = ({ signal }) =>
    findAdIsLiked(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAdIsLiked>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAdIsLikedQueryResult = NonNullable<Awaited<ReturnType<typeof findAdIsLiked>>>
export type FindAdIsLikedQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAdIsLiked<
  TData = Awaited<ReturnType<typeof findAdIsLiked>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdIsLiked>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findAdIsLiked>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdIsLiked<
  TData = Awaited<ReturnType<typeof findAdIsLiked>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdIsLiked>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAdIsLiked>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdIsLiked<
  TData = Awaited<ReturnType<typeof findAdIsLiked>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdIsLiked>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAdIsLiked<
  TData = Awaited<ReturnType<typeof findAdIsLiked>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdIsLiked>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAdIsLikedQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getHandleAdvertisementLikeUrl = (id: string) => {
  return `http://localhost:3333/like/ad/${id}`
}

export const handleAdvertisementLike = async (
  id: string,
  options?: RequestInit,
): Promise<HandleAdvertisementLikeResponseDto> => {
  return customFetch<HandleAdvertisementLikeResponseDto>(getHandleAdvertisementLikeUrl(id), {
    ...options,
    method: 'PATCH',
  })
}

export const getHandleAdvertisementLikeMutationOptions = <
  TData = Awaited<ReturnType<typeof handleAdvertisementLike>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customFetch>
}) => {
  const mutationKey = ['handleAdvertisementLike']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof handleAdvertisementLike>>, { id: string }> = (props) => {
    const { id } = props ?? {}

    return handleAdvertisementLike(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError, { id: string }, TContext>
}

export type HandleAdvertisementLikeMutationResult = NonNullable<Awaited<ReturnType<typeof handleAdvertisementLike>>>

export type HandleAdvertisementLikeMutationError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export const useHandleAdvertisementLike = <
  TData = Awaited<ReturnType<typeof handleAdvertisementLike>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customFetch>
}): UseMutationResult<TData, TError, { id: string }, TContext> => {
  const mutationOptions = getHandleAdvertisementLikeMutationOptions(options)

  return useMutation(mutationOptions)
}
export const getFindAllAdvertisementLikesUrl = (id: string) => {
  return `http://localhost:3333/like/ad/likes-count/${id}`
}

export const findAllAdvertisementLikes = async (id: string, options?: RequestInit): Promise<number> => {
  return customFetch<number>(getFindAllAdvertisementLikesUrl(id), {
    ...options,
    method: 'GET',
  })
}

export const getFindAllAdvertisementLikesQueryKey = (id: string) => {
  return [`http://localhost:3333/like/ad/likes-count/${id}`] as const
}

export const getFindAllAdvertisementLikesInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findAllAdvertisementLikes>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementLikes>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllAdvertisementLikesQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllAdvertisementLikes>>> = ({ signal }) =>
    findAllAdvertisementLikes(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findAllAdvertisementLikes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllAdvertisementLikesInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof findAllAdvertisementLikes>>
>
export type FindAllAdvertisementLikesInfiniteQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAllAdvertisementLikesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllAdvertisementLikes>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementLikes>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllAdvertisementLikes>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllAdvertisementLikesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllAdvertisementLikes>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementLikes>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllAdvertisementLikes>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllAdvertisementLikesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllAdvertisementLikes>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementLikes>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllAdvertisementLikesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllAdvertisementLikes>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementLikes>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllAdvertisementLikesInfiniteQueryOptions(id, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAllAdvertisementLikesQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllAdvertisementLikes>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementLikes>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllAdvertisementLikesQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllAdvertisementLikes>>> = ({ signal }) =>
    findAllAdvertisementLikes(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllAdvertisementLikes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllAdvertisementLikesQueryResult = NonNullable<Awaited<ReturnType<typeof findAllAdvertisementLikes>>>
export type FindAllAdvertisementLikesQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAllAdvertisementLikes<
  TData = Awaited<ReturnType<typeof findAllAdvertisementLikes>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementLikes>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllAdvertisementLikes>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllAdvertisementLikes<
  TData = Awaited<ReturnType<typeof findAllAdvertisementLikes>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementLikes>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllAdvertisementLikes>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllAdvertisementLikes<
  TData = Awaited<ReturnType<typeof findAllAdvertisementLikes>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementLikes>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllAdvertisementLikes<
  TData = Awaited<ReturnType<typeof findAllAdvertisementLikes>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementLikes>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllAdvertisementLikesQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindFeedbackIsLikedUrl = (id: string) => {
  return `http://localhost:3333/like/fb/${id}`
}

export const findFeedbackIsLiked = async (id: string, options?: RequestInit): Promise<boolean> => {
  return customFetch<boolean>(getFindFeedbackIsLikedUrl(id), {
    ...options,
    method: 'GET',
  })
}

export const getFindFeedbackIsLikedQueryKey = (id: string) => {
  return [`http://localhost:3333/like/fb/${id}`] as const
}

export const getFindFeedbackIsLikedInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findFeedbackIsLiked>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findFeedbackIsLiked>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindFeedbackIsLikedQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findFeedbackIsLiked>>> = ({ signal }) =>
    findFeedbackIsLiked(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findFeedbackIsLiked>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindFeedbackIsLikedInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findFeedbackIsLiked>>>
export type FindFeedbackIsLikedInfiniteQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindFeedbackIsLikedInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findFeedbackIsLiked>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findFeedbackIsLiked>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findFeedbackIsLiked>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindFeedbackIsLikedInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findFeedbackIsLiked>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findFeedbackIsLiked>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findFeedbackIsLiked>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindFeedbackIsLikedInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findFeedbackIsLiked>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findFeedbackIsLiked>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindFeedbackIsLikedInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findFeedbackIsLiked>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findFeedbackIsLiked>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindFeedbackIsLikedInfiniteQueryOptions(id, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindFeedbackIsLikedQueryOptions = <
  TData = Awaited<ReturnType<typeof findFeedbackIsLiked>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFeedbackIsLiked>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindFeedbackIsLikedQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findFeedbackIsLiked>>> = ({ signal }) =>
    findFeedbackIsLiked(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findFeedbackIsLiked>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindFeedbackIsLikedQueryResult = NonNullable<Awaited<ReturnType<typeof findFeedbackIsLiked>>>
export type FindFeedbackIsLikedQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindFeedbackIsLiked<
  TData = Awaited<ReturnType<typeof findFeedbackIsLiked>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFeedbackIsLiked>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findFeedbackIsLiked>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindFeedbackIsLiked<
  TData = Awaited<ReturnType<typeof findFeedbackIsLiked>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFeedbackIsLiked>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findFeedbackIsLiked>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindFeedbackIsLiked<
  TData = Awaited<ReturnType<typeof findFeedbackIsLiked>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFeedbackIsLiked>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindFeedbackIsLiked<
  TData = Awaited<ReturnType<typeof findFeedbackIsLiked>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFeedbackIsLiked>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindFeedbackIsLikedQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getHandleFeedbackLikeUrl = (id: string) => {
  return `http://localhost:3333/like/fb/${id}`
}

export const handleFeedbackLike = async (id: string, options?: RequestInit): Promise<HandleFeedbackLikeResponseDto> => {
  return customFetch<HandleFeedbackLikeResponseDto>(getHandleFeedbackLikeUrl(id), {
    ...options,
    method: 'PATCH',
  })
}

export const getHandleFeedbackLikeMutationOptions = <
  TData = Awaited<ReturnType<typeof handleFeedbackLike>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customFetch>
}) => {
  const mutationKey = ['handleFeedbackLike']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof handleFeedbackLike>>, { id: string }> = (props) => {
    const { id } = props ?? {}

    return handleFeedbackLike(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError, { id: string }, TContext>
}

export type HandleFeedbackLikeMutationResult = NonNullable<Awaited<ReturnType<typeof handleFeedbackLike>>>

export type HandleFeedbackLikeMutationError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export const useHandleFeedbackLike = <
  TData = Awaited<ReturnType<typeof handleFeedbackLike>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customFetch>
}): UseMutationResult<TData, TError, { id: string }, TContext> => {
  const mutationOptions = getHandleFeedbackLikeMutationOptions(options)

  return useMutation(mutationOptions)
}
export const getFindAllFeedbackLikesUrl = (id: string) => {
  return `http://localhost:3333/like/fb/likes-count/${id}`
}

export const findAllFeedbackLikes = async (id: string, options?: RequestInit): Promise<number> => {
  return customFetch<number>(getFindAllFeedbackLikesUrl(id), {
    ...options,
    method: 'GET',
  })
}

export const getFindAllFeedbackLikesQueryKey = (id: string) => {
  return [`http://localhost:3333/like/fb/likes-count/${id}`] as const
}

export const getFindAllFeedbackLikesInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findAllFeedbackLikes>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllFeedbackLikes>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllFeedbackLikesQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllFeedbackLikes>>> = ({ signal }) =>
    findAllFeedbackLikes(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findAllFeedbackLikes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllFeedbackLikesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findAllFeedbackLikes>>>
export type FindAllFeedbackLikesInfiniteQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAllFeedbackLikesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllFeedbackLikes>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllFeedbackLikes>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllFeedbackLikes>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllFeedbackLikesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllFeedbackLikes>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllFeedbackLikes>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllFeedbackLikes>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllFeedbackLikesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllFeedbackLikes>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllFeedbackLikes>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllFeedbackLikesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllFeedbackLikes>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllFeedbackLikes>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllFeedbackLikesInfiniteQueryOptions(id, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAllFeedbackLikesQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllFeedbackLikes>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFeedbackLikes>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllFeedbackLikesQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllFeedbackLikes>>> = ({ signal }) =>
    findAllFeedbackLikes(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllFeedbackLikes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllFeedbackLikesQueryResult = NonNullable<Awaited<ReturnType<typeof findAllFeedbackLikes>>>
export type FindAllFeedbackLikesQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAllFeedbackLikes<
  TData = Awaited<ReturnType<typeof findAllFeedbackLikes>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFeedbackLikes>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllFeedbackLikes>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllFeedbackLikes<
  TData = Awaited<ReturnType<typeof findAllFeedbackLikes>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFeedbackLikes>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllFeedbackLikes>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllFeedbackLikes<
  TData = Awaited<ReturnType<typeof findAllFeedbackLikes>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFeedbackLikes>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllFeedbackLikes<
  TData = Awaited<ReturnType<typeof findAllFeedbackLikes>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFeedbackLikes>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllFeedbackLikesQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAdIsFavoritedUrl = (id: string) => {
  return `http://localhost:3333/favorite/is-favorited/${id}`
}

export const findAdIsFavorited = async (id: string, options?: RequestInit): Promise<boolean> => {
  return customFetch<boolean>(getFindAdIsFavoritedUrl(id), {
    ...options,
    method: 'GET',
  })
}

export const getFindAdIsFavoritedQueryKey = (id: string) => {
  return [`http://localhost:3333/favorite/is-favorited/${id}`] as const
}

export const getFindAdIsFavoritedInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findAdIsFavorited>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdIsFavorited>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAdIsFavoritedQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAdIsFavorited>>> = ({ signal }) =>
    findAdIsFavorited(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findAdIsFavorited>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAdIsFavoritedInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findAdIsFavorited>>>
export type FindAdIsFavoritedInfiniteQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAdIsFavoritedInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdIsFavorited>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdIsFavorited>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findAdIsFavorited>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdIsFavoritedInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdIsFavorited>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdIsFavorited>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAdIsFavorited>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdIsFavoritedInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdIsFavorited>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdIsFavorited>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAdIsFavoritedInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdIsFavorited>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdIsFavorited>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAdIsFavoritedInfiniteQueryOptions(id, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAdIsFavoritedQueryOptions = <
  TData = Awaited<ReturnType<typeof findAdIsFavorited>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdIsFavorited>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAdIsFavoritedQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAdIsFavorited>>> = ({ signal }) =>
    findAdIsFavorited(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAdIsFavorited>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAdIsFavoritedQueryResult = NonNullable<Awaited<ReturnType<typeof findAdIsFavorited>>>
export type FindAdIsFavoritedQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAdIsFavorited<
  TData = Awaited<ReturnType<typeof findAdIsFavorited>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdIsFavorited>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findAdIsFavorited>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdIsFavorited<
  TData = Awaited<ReturnType<typeof findAdIsFavorited>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdIsFavorited>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAdIsFavorited>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdIsFavorited<
  TData = Awaited<ReturnType<typeof findAdIsFavorited>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdIsFavorited>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAdIsFavorited<
  TData = Awaited<ReturnType<typeof findAdIsFavorited>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdIsFavorited>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAdIsFavoritedQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}
