/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Auto Cars - Backend
 * Cars seller API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import { customInstance } from '../../custom-instance'
import type { ErrorType, BodyType } from '../../custom-instance'
import type {
  CreateAdBodyDto,
  CreateAdResponseDto,
  DeletedAdResponseDto,
  FindAdByIdResponseDto,
  FindAdvertisementsMetrics200,
  FindAdvertisementsMetricsByUserId200,
  FindAllAdvertisements200,
  FindAllAdvertisementsByUserId200,
  FindAllAdvertisementsByUserIdParams,
  FindAllAdvertisementsParams,
  FindAllSoldAds200,
  FindAllSoldAdsParams,
  MinimalAdvertisementDetailsDto,
  SwaggerBadRequestDto,
  SwaggerNotAllowedDto,
  SwaggerResourceNotFoundDto,
  UpdateAdDTO,
} from '../schemas'

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const createAdvertisement = (
  createAdBodyDto: BodyType<CreateAdBodyDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CreateAdResponseDto>(
    {
      url: `http://localhost:3333/advertisement`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createAdBodyDto,
      signal,
    },
    options,
  )
}

export const getCreateAdvertisementMutationOptions = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAdvertisement>>,
    TError,
    { data: BodyType<CreateAdBodyDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAdvertisement>>,
  TError,
  { data: BodyType<CreateAdBodyDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAdvertisement>>,
    { data: BodyType<CreateAdBodyDto> }
  > = (props) => {
    const { data } = props ?? {}

    return createAdvertisement(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateAdvertisementMutationResult = NonNullable<Awaited<ReturnType<typeof createAdvertisement>>>
export type CreateAdvertisementMutationBody = BodyType<CreateAdBodyDto>
export type CreateAdvertisementMutationError = ErrorType<
  SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto
>

export const useCreateAdvertisement = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAdvertisement>>,
    TError,
    { data: BodyType<CreateAdBodyDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof createAdvertisement>>,
  TError,
  { data: BodyType<CreateAdBodyDto> },
  TContext
> => {
  const mutationOptions = getCreateAdvertisementMutationOptions(options)

  return useMutation(mutationOptions)
}
export const deleteAdvertisement = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<DeletedAdResponseDto>(
    { url: `http://localhost:3333/advertisement/${id}`, method: 'DELETE' },
    options,
  )
}

export const getDeleteAdvertisementMutationOptions = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteAdvertisement>>, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<Awaited<ReturnType<typeof deleteAdvertisement>>, TError, { id: string }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdvertisement>>, { id: string }> = (props) => {
    const { id } = props ?? {}

    return deleteAdvertisement(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteAdvertisementMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdvertisement>>>

export type DeleteAdvertisementMutationError = ErrorType<
  SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto
>

export const useDeleteAdvertisement = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteAdvertisement>>, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<Awaited<ReturnType<typeof deleteAdvertisement>>, TError, { id: string }, TContext> => {
  const mutationOptions = getDeleteAdvertisementMutationOptions(options)

  return useMutation(mutationOptions)
}
export const findAdById = (id: string, options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<FindAdByIdResponseDto>(
    { url: `http://localhost:3333/advertisement/${id}`, method: 'GET', signal },
    options,
  )
}

export const getFindAdByIdQueryKey = (id: string) => {
  return [`http://localhost:3333/advertisement/${id}`] as const
}

export const getFindAdByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof findAdById>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdById>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAdByIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAdById>>> = ({ signal }) =>
    findAdById(id, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAdById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type FindAdByIdQueryResult = NonNullable<Awaited<ReturnType<typeof findAdById>>>
export type FindAdByIdQueryError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>

export function useFindAdById<
  TData = Awaited<ReturnType<typeof findAdById>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdById>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findAdById>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customInstance>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAdById<
  TData = Awaited<ReturnType<typeof findAdById>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdById>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAdById>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAdById<
  TData = Awaited<ReturnType<typeof findAdById>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdById>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useFindAdById<
  TData = Awaited<ReturnType<typeof findAdById>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdById>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFindAdByIdQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const findAllAdvertisementsByUserId = (
  userId: string,
  params?: FindAllAdvertisementsByUserIdParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<FindAllAdvertisementsByUserId200>(
    { url: `http://localhost:3333/advertisement/all/${userId}`, method: 'GET', params, signal },
    options,
  )
}

export const getFindAllAdvertisementsByUserIdQueryKey = (
  userId: string,
  params?: FindAllAdvertisementsByUserIdParams,
) => {
  return [`http://localhost:3333/advertisement/all/${userId}`, ...(params ? [params] : [])] as const
}

export const getFindAllAdvertisementsByUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  userId: string,
  params?: FindAllAdvertisementsByUserIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllAdvertisementsByUserIdQueryKey(userId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>> = ({ signal }) =>
    findAllAdvertisementsByUserId(userId, params, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!userId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type FindAllAdvertisementsByUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>
>
export type FindAllAdvertisementsByUserIdQueryError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>

export function useFindAllAdvertisementsByUserId<
  TData = Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  userId: string,
  params: undefined | FindAllAdvertisementsByUserIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAllAdvertisementsByUserId<
  TData = Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  userId: string,
  params?: FindAllAdvertisementsByUserIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAllAdvertisementsByUserId<
  TData = Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  userId: string,
  params?: FindAllAdvertisementsByUserIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useFindAllAdvertisementsByUserId<
  TData = Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  userId: string,
  params?: FindAllAdvertisementsByUserIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFindAllAdvertisementsByUserIdQueryOptions(userId, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const findAdvertisementsMetricsByUserId = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<FindAdvertisementsMetricsByUserId200>(
    { url: `http://localhost:3333/advertisement/all/metrics-by-user`, method: 'GET', signal },
    options,
  )
}

export const getFindAdvertisementsMetricsByUserIdQueryKey = () => {
  return [`http://localhost:3333/advertisement/all/metrics-by-user`] as const
}

export const getFindAdvertisementsMetricsByUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAdvertisementsMetricsByUserIdQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>> = ({ signal }) =>
    findAdvertisementsMetricsByUserId(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type FindAdvertisementsMetricsByUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>
>
export type FindAdvertisementsMetricsByUserIdQueryError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>

export function useFindAdvertisementsMetricsByUserId<
  TData = Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>, TError, TData>,
      'initialData'
    >
  request?: SecondParameter<typeof customInstance>
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAdvertisementsMetricsByUserId<
  TData = Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>, TError, TData>,
      'initialData'
    >
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAdvertisementsMetricsByUserId<
  TData = Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useFindAdvertisementsMetricsByUserId<
  TData = Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFindAdvertisementsMetricsByUserIdQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const findAdvertisementsMetrics = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<FindAdvertisementsMetrics200>(
    { url: `http://localhost:3333/advertisement/all/metrics`, method: 'GET', signal },
    options,
  )
}

export const getFindAdvertisementsMetricsQueryKey = () => {
  return [`http://localhost:3333/advertisement/all/metrics`] as const
}

export const getFindAdvertisementsMetricsQueryOptions = <
  TData = Awaited<ReturnType<typeof findAdvertisementsMetrics>>,
  TError = ErrorType<SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetrics>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAdvertisementsMetricsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAdvertisementsMetrics>>> = ({ signal }) =>
    findAdvertisementsMetrics(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAdvertisementsMetrics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type FindAdvertisementsMetricsQueryResult = NonNullable<Awaited<ReturnType<typeof findAdvertisementsMetrics>>>
export type FindAdvertisementsMetricsQueryError = ErrorType<SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>

export function useFindAdvertisementsMetrics<
  TData = Awaited<ReturnType<typeof findAdvertisementsMetrics>>,
  TError = ErrorType<SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetrics>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findAdvertisementsMetrics>>, TError, TData>, 'initialData'>
  request?: SecondParameter<typeof customInstance>
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAdvertisementsMetrics<
  TData = Awaited<ReturnType<typeof findAdvertisementsMetrics>>,
  TError = ErrorType<SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetrics>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAdvertisementsMetrics>>, TError, TData>,
      'initialData'
    >
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAdvertisementsMetrics<
  TData = Awaited<ReturnType<typeof findAdvertisementsMetrics>>,
  TError = ErrorType<SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetrics>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useFindAdvertisementsMetrics<
  TData = Awaited<ReturnType<typeof findAdvertisementsMetrics>>,
  TError = ErrorType<SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetrics>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFindAdvertisementsMetricsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const findAllAdvertisements = (
  params: FindAllAdvertisementsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<FindAllAdvertisements200>(
    { url: `http://localhost:3333/advertisement/all`, method: 'GET', params, signal },
    options,
  )
}

export const getFindAllAdvertisementsQueryKey = (params: FindAllAdvertisementsParams) => {
  return [`http://localhost:3333/advertisement/all`, ...(params ? [params] : [])] as const
}

export const getFindAllAdvertisementsQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllAdvertisements>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  params: FindAllAdvertisementsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllAdvertisementsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllAdvertisements>>> = ({ signal }) =>
    findAllAdvertisements(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllAdvertisements>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type FindAllAdvertisementsQueryResult = NonNullable<Awaited<ReturnType<typeof findAllAdvertisements>>>
export type FindAllAdvertisementsQueryError = ErrorType<SwaggerBadRequestDto>

export function useFindAllAdvertisements<
  TData = Awaited<ReturnType<typeof findAllAdvertisements>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  params: FindAllAdvertisementsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisements>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllAdvertisements>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customInstance>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAllAdvertisements<
  TData = Awaited<ReturnType<typeof findAllAdvertisements>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  params: FindAllAdvertisementsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisements>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllAdvertisements>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAllAdvertisements<
  TData = Awaited<ReturnType<typeof findAllAdvertisements>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  params: FindAllAdvertisementsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useFindAllAdvertisements<
  TData = Awaited<ReturnType<typeof findAllAdvertisements>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  params: FindAllAdvertisementsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFindAllAdvertisementsQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const findAllSoldAds = (
  params?: FindAllSoldAdsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<FindAllSoldAds200>(
    { url: `http://localhost:3333/advertisement/sold-ads`, method: 'GET', params, signal },
    options,
  )
}

export const getFindAllSoldAdsQueryKey = (params?: FindAllSoldAdsParams) => {
  return [`http://localhost:3333/advertisement/sold-ads`, ...(params ? [params] : [])] as const
}

export const getFindAllSoldAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllSoldAds>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  params?: FindAllSoldAdsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllSoldAds>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllSoldAdsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllSoldAds>>> = ({ signal }) =>
    findAllSoldAds(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllSoldAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type FindAllSoldAdsQueryResult = NonNullable<Awaited<ReturnType<typeof findAllSoldAds>>>
export type FindAllSoldAdsQueryError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>

export function useFindAllSoldAds<
  TData = Awaited<ReturnType<typeof findAllSoldAds>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  params: undefined | FindAllSoldAdsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllSoldAds>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllSoldAds>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customInstance>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAllSoldAds<
  TData = Awaited<ReturnType<typeof findAllSoldAds>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  params?: FindAllSoldAdsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllSoldAds>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllSoldAds>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAllSoldAds<
  TData = Awaited<ReturnType<typeof findAllSoldAds>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  params?: FindAllSoldAdsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllSoldAds>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useFindAllSoldAds<
  TData = Awaited<ReturnType<typeof findAllSoldAds>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  params?: FindAllSoldAdsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllSoldAds>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFindAllSoldAdsQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const updateAdvertisement = (
  id: string,
  updateAdDTO: BodyType<UpdateAdDTO>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<MinimalAdvertisementDetailsDto>(
    {
      url: `http://localhost:3333/advertisement/update/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateAdDTO,
    },
    options,
  )
}

export const getUpdateAdvertisementMutationOptions = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAdvertisement>>,
    TError,
    { id: string; data: BodyType<UpdateAdDTO> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAdvertisement>>,
  TError,
  { id: string; data: BodyType<UpdateAdDTO> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAdvertisement>>,
    { id: string; data: BodyType<UpdateAdDTO> }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateAdvertisement(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateAdvertisementMutationResult = NonNullable<Awaited<ReturnType<typeof updateAdvertisement>>>
export type UpdateAdvertisementMutationBody = BodyType<UpdateAdDTO>
export type UpdateAdvertisementMutationError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>

export const useUpdateAdvertisement = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAdvertisement>>,
    TError,
    { id: string; data: BodyType<UpdateAdDTO> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof updateAdvertisement>>,
  TError,
  { id: string; data: BodyType<UpdateAdDTO> },
  TContext
> => {
  const mutationOptions = getUpdateAdvertisementMutationOptions(options)

  return useMutation(mutationOptions)
}
