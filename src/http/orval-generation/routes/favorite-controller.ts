/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Auto Cars - Backend
 * Cars seller API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import { customInstance } from '../../custom-instance'
import type { ErrorType } from '../../custom-instance'
import type {
  FindAllFavorites200,
  FindAllFavoritesByUserId200,
  FindAllFavoritesByUserIdParams,
  FindAllFavoritesParams,
  SwaggerBadRequestDto,
  SwaggerResourceNotFoundDto,
} from '../schemas'

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const findAllFavoritesByUserId = (
  params?: FindAllFavoritesByUserIdParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<FindAllFavoritesByUserId200>(
    { url: `http://localhost:3333/favorite`, method: 'GET', params, signal },
    options,
  )
}

export const getFindAllFavoritesByUserIdQueryKey = (params?: FindAllFavoritesByUserIdParams) => {
  return [`http://localhost:3333/favorite`, ...(params ? [params] : [])] as const
}

export const getFindAllFavoritesByUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllFavoritesByUserId>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  params?: FindAllFavoritesByUserIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllFavoritesByUserIdQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllFavoritesByUserId>>> = ({ signal }) =>
    findAllFavoritesByUserId(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllFavoritesByUserId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type FindAllFavoritesByUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof findAllFavoritesByUserId>>>
export type FindAllFavoritesByUserIdQueryError = ErrorType<SwaggerBadRequestDto>

export function useFindAllFavoritesByUserId<
  TData = Awaited<ReturnType<typeof findAllFavoritesByUserId>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  params: undefined | FindAllFavoritesByUserIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAllFavoritesByUserId<
  TData = Awaited<ReturnType<typeof findAllFavoritesByUserId>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  params?: FindAllFavoritesByUserIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAllFavoritesByUserId<
  TData = Awaited<ReturnType<typeof findAllFavoritesByUserId>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  params?: FindAllFavoritesByUserIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useFindAllFavoritesByUserId<
  TData = Awaited<ReturnType<typeof findAllFavoritesByUserId>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  params?: FindAllFavoritesByUserIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFindAllFavoritesByUserIdQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const findAllFavorites = (
  params?: FindAllFavoritesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<FindAllFavorites200>(
    { url: `http://localhost:3333/favorite/admin`, method: 'GET', params, signal },
    options,
  )
}

export const getFindAllFavoritesQueryKey = (params?: FindAllFavoritesParams) => {
  return [`http://localhost:3333/favorite/admin`, ...(params ? [params] : [])] as const
}

export const getFindAllFavoritesQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllFavorites>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  params?: FindAllFavoritesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllFavoritesQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllFavorites>>> = ({ signal }) =>
    findAllFavorites(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllFavorites>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type FindAllFavoritesQueryResult = NonNullable<Awaited<ReturnType<typeof findAllFavorites>>>
export type FindAllFavoritesQueryError = ErrorType<SwaggerBadRequestDto>

export function useFindAllFavorites<
  TData = Awaited<ReturnType<typeof findAllFavorites>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  params: undefined | FindAllFavoritesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customInstance>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAllFavorites<
  TData = Awaited<ReturnType<typeof findAllFavorites>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  params?: FindAllFavoritesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAllFavorites<
  TData = Awaited<ReturnType<typeof findAllFavorites>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  params?: FindAllFavoritesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useFindAllFavorites<
  TData = Awaited<ReturnType<typeof findAllFavorites>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  params?: FindAllFavoritesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFindAllFavoritesQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const findDistinctFavoritesCount = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<number>(
    { url: `http://localhost:3333/favorite/distinct-count`, method: 'GET', signal },
    options,
  )
}

export const getFindDistinctFavoritesCountQueryKey = () => {
  return [`http://localhost:3333/favorite/distinct-count`] as const
}

export const getFindDistinctFavoritesCountQueryOptions = <
  TData = Awaited<ReturnType<typeof findDistinctFavoritesCount>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindDistinctFavoritesCountQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findDistinctFavoritesCount>>> = ({ signal }) =>
    findDistinctFavoritesCount(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findDistinctFavoritesCount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type FindDistinctFavoritesCountQueryResult = NonNullable<Awaited<ReturnType<typeof findDistinctFavoritesCount>>>
export type FindDistinctFavoritesCountQueryError = ErrorType<SwaggerBadRequestDto>

export function useFindDistinctFavoritesCount<
  TData = Awaited<ReturnType<typeof findDistinctFavoritesCount>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>,
      'initialData'
    >
  request?: SecondParameter<typeof customInstance>
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindDistinctFavoritesCount<
  TData = Awaited<ReturnType<typeof findDistinctFavoritesCount>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>,
      'initialData'
    >
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindDistinctFavoritesCount<
  TData = Awaited<ReturnType<typeof findDistinctFavoritesCount>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useFindDistinctFavoritesCount<
  TData = Awaited<ReturnType<typeof findDistinctFavoritesCount>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFindDistinctFavoritesCountQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const findFavoritesCountByAdvertisement = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<number>({ url: `http://localhost:3333/favorite/count/${id}`, method: 'GET', signal }, options)
}

export const getFindFavoritesCountByAdvertisementQueryKey = (id: string) => {
  return [`http://localhost:3333/favorite/count/${id}`] as const
}

export const getFindFavoritesCountByAdvertisementQueryOptions = <
  TData = Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindFavoritesCountByAdvertisementQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>> = ({ signal }) =>
    findFavoritesCountByAdvertisement(id, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type FindFavoritesCountByAdvertisementQueryResult = NonNullable<
  Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>
>
export type FindFavoritesCountByAdvertisementQueryError = ErrorType<SwaggerBadRequestDto>

export function useFindFavoritesCountByAdvertisement<
  TData = Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindFavoritesCountByAdvertisement<
  TData = Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindFavoritesCountByAdvertisement<
  TData = Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useFindFavoritesCountByAdvertisement<
  TData = Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFindFavoritesCountByAdvertisementQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const findFavoritesCount = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<number>({ url: `http://localhost:3333/favorite/count`, method: 'GET', signal }, options)
}

export const getFindFavoritesCountQueryKey = () => {
  return [`http://localhost:3333/favorite/count`] as const
}

export const getFindFavoritesCountQueryOptions = <
  TData = Awaited<ReturnType<typeof findFavoritesCount>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindFavoritesCountQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findFavoritesCount>>> = ({ signal }) =>
    findFavoritesCount(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findFavoritesCount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type FindFavoritesCountQueryResult = NonNullable<Awaited<ReturnType<typeof findFavoritesCount>>>
export type FindFavoritesCountQueryError = ErrorType<SwaggerBadRequestDto>

export function useFindFavoritesCount<
  TData = Awaited<ReturnType<typeof findFavoritesCount>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>, 'initialData'>
  request?: SecondParameter<typeof customInstance>
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindFavoritesCount<
  TData = Awaited<ReturnType<typeof findFavoritesCount>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>, 'initialData'>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindFavoritesCount<
  TData = Awaited<ReturnType<typeof findFavoritesCount>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useFindFavoritesCount<
  TData = Awaited<ReturnType<typeof findFavoritesCount>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFindFavoritesCountQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const handleFavorite = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<string>(
    { url: `http://localhost:3333/favorite/handle-favorite/${id}`, method: 'PATCH' },
    options,
  )
}

export const getHandleFavoriteMutationOptions = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof handleFavorite>>, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<Awaited<ReturnType<typeof handleFavorite>>, TError, { id: string }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof handleFavorite>>, { id: string }> = (props) => {
    const { id } = props ?? {}

    return handleFavorite(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type HandleFavoriteMutationResult = NonNullable<Awaited<ReturnType<typeof handleFavorite>>>

export type HandleFavoriteMutationError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>

export const useHandleFavorite = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof handleFavorite>>, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<Awaited<ReturnType<typeof handleFavorite>>, TError, { id: string }, TContext> => {
  const mutationOptions = getHandleFavoriteMutationOptions(options)

  return useMutation(mutationOptions)
}
