/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Auto Cars - Backend
 * Cars seller API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import { customInstance } from '../../custom-instance'
import type { ErrorType, BodyType } from '../../custom-instance'
import type {
  BlockUserResponseDto,
  DeleteOwnUserResponseDto,
  DeleteUserResponseDto,
  FindAllTopSellersParams,
  FindAllTopSellersResponseDto,
  FindAllUsers200,
  FindAllUsersParams,
  ForgotPasswordBodyDto,
  ForgotResponseDto,
  NewPasswordBodyDto,
  NewPasswordParams,
  NewPasswordResponseDto,
  SignInBodyDto,
  SignUpBodyDto,
  SignUpResponseDto,
  SwaggerBadRequestDto,
  SwaggerInvalidPasswordResetTokenDto,
  SwaggerNotAllowedDto,
  SwaggerResourceAlreadyExistsDto,
  SwaggerResourceNotFoundDto,
  UpdateOwnUserBodyDto,
  UpdateOwnUserResponseDto,
} from '../schemas'

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const blockUser = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<BlockUserResponseDto>(
    { url: `http://localhost:3333/user/block/${id}`, method: 'PATCH' },
    options,
  )
}

export const getBlockUserMutationOptions = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof blockUser>>, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<Awaited<ReturnType<typeof blockUser>>, TError, { id: string }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof blockUser>>, { id: string }> = (props) => {
    const { id } = props ?? {}

    return blockUser(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type BlockUserMutationResult = NonNullable<Awaited<ReturnType<typeof blockUser>>>

export type BlockUserMutationError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>

export const useBlockUser = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof blockUser>>, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<Awaited<ReturnType<typeof blockUser>>, TError, { id: string }, TContext> => {
  const mutationOptions = getBlockUserMutationOptions(options)

  return useMutation(mutationOptions)
}
export const deleteOwnUser = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<DeleteOwnUserResponseDto>({ url: `http://localhost:3333/user/own`, method: 'DELETE' }, options)
}

export const getDeleteOwnUserMutationOptions = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteOwnUser>>, TError, void, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<Awaited<ReturnType<typeof deleteOwnUser>>, TError, void, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOwnUser>>, void> = () => {
    return deleteOwnUser(requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteOwnUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOwnUser>>>

export type DeleteOwnUserMutationError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>

export const useDeleteOwnUser = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteOwnUser>>, TError, void, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<Awaited<ReturnType<typeof deleteOwnUser>>, TError, void, TContext> => {
  const mutationOptions = getDeleteOwnUserMutationOptions(options)

  return useMutation(mutationOptions)
}
export const deleteUser = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<DeleteUserResponseDto>({ url: `http://localhost:3333/user/${id}`, method: 'DELETE' }, options)
}

export const getDeleteUserMutationOptions = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError, { id: string }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUser>>, { id: string }> = (props) => {
    const { id } = props ?? {}

    return deleteUser(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUser>>>

export type DeleteUserMutationError = ErrorType<
  SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto
>

export const useDeleteUser = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteUser>>, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<Awaited<ReturnType<typeof deleteUser>>, TError, { id: string }, TContext> => {
  const mutationOptions = getDeleteUserMutationOptions(options)

  return useMutation(mutationOptions)
}
export const findAllTopSellers = (
  params?: FindAllTopSellersParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<FindAllTopSellersResponseDto>(
    { url: `http://localhost:3333/user/top-sellers`, method: 'GET', params, signal },
    options,
  )
}

export const getFindAllTopSellersQueryKey = (params?: FindAllTopSellersParams) => {
  return [`http://localhost:3333/user/top-sellers`, ...(params ? [params] : [])] as const
}

export const getFindAllTopSellersQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllTopSellers>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  params?: FindAllTopSellersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllTopSellers>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllTopSellersQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllTopSellers>>> = ({ signal }) =>
    findAllTopSellers(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllTopSellers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type FindAllTopSellersQueryResult = NonNullable<Awaited<ReturnType<typeof findAllTopSellers>>>
export type FindAllTopSellersQueryError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>

export function useFindAllTopSellers<
  TData = Awaited<ReturnType<typeof findAllTopSellers>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  params: undefined | FindAllTopSellersParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllTopSellers>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllTopSellers>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customInstance>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAllTopSellers<
  TData = Awaited<ReturnType<typeof findAllTopSellers>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  params?: FindAllTopSellersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllTopSellers>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllTopSellers>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAllTopSellers<
  TData = Awaited<ReturnType<typeof findAllTopSellers>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  params?: FindAllTopSellersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllTopSellers>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useFindAllTopSellers<
  TData = Awaited<ReturnType<typeof findAllTopSellers>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
>(
  params?: FindAllTopSellersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllTopSellers>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFindAllTopSellersQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const findAllUsers = (
  params?: FindAllUsersParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<FindAllUsers200>(
    { url: `http://localhost:3333/user/find-all`, method: 'GET', params, signal },
    options,
  )
}

export const getFindAllUsersQueryKey = (params?: FindAllUsersParams) => {
  return [`http://localhost:3333/user/find-all`, ...(params ? [params] : [])] as const
}

export const getFindAllUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllUsers>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto>,
>(
  params?: FindAllUsersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllUsers>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllUsersQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllUsers>>> = ({ signal }) =>
    findAllUsers(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type FindAllUsersQueryResult = NonNullable<Awaited<ReturnType<typeof findAllUsers>>>
export type FindAllUsersQueryError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto>

export function useFindAllUsers<
  TData = Awaited<ReturnType<typeof findAllUsers>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto>,
>(
  params: undefined | FindAllUsersParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllUsers>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllUsers>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customInstance>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAllUsers<
  TData = Awaited<ReturnType<typeof findAllUsers>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto>,
>(
  params?: FindAllUsersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllUsers>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllUsers>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAllUsers<
  TData = Awaited<ReturnType<typeof findAllUsers>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto>,
>(
  params?: FindAllUsersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllUsers>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useFindAllUsers<
  TData = Awaited<ReturnType<typeof findAllUsers>>,
  TError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto>,
>(
  params?: FindAllUsersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllUsers>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFindAllUsersQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const forgotPasswordControllerHandle = (
  forgotPasswordBodyDto: BodyType<ForgotPasswordBodyDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ForgotResponseDto>(
    {
      url: `http://localhost:3333/user/forgot-password`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: forgotPasswordBodyDto,
      signal,
    },
    options,
  )
}

export const getForgotPasswordControllerHandleMutationOptions = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof forgotPasswordControllerHandle>>,
    TError,
    { data: BodyType<ForgotPasswordBodyDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof forgotPasswordControllerHandle>>,
  TError,
  { data: BodyType<ForgotPasswordBodyDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof forgotPasswordControllerHandle>>,
    { data: BodyType<ForgotPasswordBodyDto> }
  > = (props) => {
    const { data } = props ?? {}

    return forgotPasswordControllerHandle(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ForgotPasswordControllerHandleMutationResult = NonNullable<
  Awaited<ReturnType<typeof forgotPasswordControllerHandle>>
>
export type ForgotPasswordControllerHandleMutationBody = BodyType<ForgotPasswordBodyDto>
export type ForgotPasswordControllerHandleMutationError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>

export const useForgotPasswordControllerHandle = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof forgotPasswordControllerHandle>>,
    TError,
    { data: BodyType<ForgotPasswordBodyDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof forgotPasswordControllerHandle>>,
  TError,
  { data: BodyType<ForgotPasswordBodyDto> },
  TContext
> => {
  const mutationOptions = getForgotPasswordControllerHandleMutationOptions(options)

  return useMutation(mutationOptions)
}
export const newPassword = (
  newPasswordBodyDto: BodyType<NewPasswordBodyDto>,
  params: NewPasswordParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<NewPasswordResponseDto>(
    {
      url: `http://localhost:3333/user/new-password`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: newPasswordBodyDto,
      params,
    },
    options,
  )
}

export const getNewPasswordMutationOptions = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerInvalidPasswordResetTokenDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof newPassword>>,
    TError,
    { data: BodyType<NewPasswordBodyDto>; params: NewPasswordParams },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof newPassword>>,
  TError,
  { data: BodyType<NewPasswordBodyDto>; params: NewPasswordParams },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof newPassword>>,
    { data: BodyType<NewPasswordBodyDto>; params: NewPasswordParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return newPassword(data, params, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type NewPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof newPassword>>>
export type NewPasswordMutationBody = BodyType<NewPasswordBodyDto>
export type NewPasswordMutationError = ErrorType<SwaggerBadRequestDto | SwaggerInvalidPasswordResetTokenDto>

export const useNewPassword = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerInvalidPasswordResetTokenDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof newPassword>>,
    TError,
    { data: BodyType<NewPasswordBodyDto>; params: NewPasswordParams },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof newPassword>>,
  TError,
  { data: BodyType<NewPasswordBodyDto>; params: NewPasswordParams },
  TContext
> => {
  const mutationOptions = getNewPasswordMutationOptions(options)

  return useMutation(mutationOptions)
}
export const signInControllerHandle = (
  signInBodyDto: BodyType<SignInBodyDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    {
      url: `http://localhost:3333/user/sign-in`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: signInBodyDto,
      signal,
    },
    options,
  )
}

export const getSignInControllerHandleMutationOptions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signInControllerHandle>>,
    TError,
    { data: BodyType<SignInBodyDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof signInControllerHandle>>,
  TError,
  { data: BodyType<SignInBodyDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signInControllerHandle>>,
    { data: BodyType<SignInBodyDto> }
  > = (props) => {
    const { data } = props ?? {}

    return signInControllerHandle(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SignInControllerHandleMutationResult = NonNullable<Awaited<ReturnType<typeof signInControllerHandle>>>
export type SignInControllerHandleMutationBody = BodyType<SignInBodyDto>
export type SignInControllerHandleMutationError = ErrorType<unknown>

export const useSignInControllerHandle = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signInControllerHandle>>,
    TError,
    { data: BodyType<SignInBodyDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof signInControllerHandle>>,
  TError,
  { data: BodyType<SignInBodyDto> },
  TContext
> => {
  const mutationOptions = getSignInControllerHandleMutationOptions(options)

  return useMutation(mutationOptions)
}
export const signUp = (
  signUpBodyDto: BodyType<SignUpBodyDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<SignUpResponseDto>(
    {
      url: `http://localhost:3333/user/sign-up`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: signUpBodyDto,
      signal,
    },
    options,
  )
}

export const getSignUpMutationOptions = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceAlreadyExistsDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError, { data: BodyType<SignUpBodyDto> }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError, { data: BodyType<SignUpBodyDto> }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof signUp>>, { data: BodyType<SignUpBodyDto> }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return signUp(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SignUpMutationResult = NonNullable<Awaited<ReturnType<typeof signUp>>>
export type SignUpMutationBody = BodyType<SignUpBodyDto>
export type SignUpMutationError = ErrorType<SwaggerBadRequestDto | SwaggerResourceAlreadyExistsDto>

export const useSignUp = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceAlreadyExistsDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError, { data: BodyType<SignUpBodyDto> }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<Awaited<ReturnType<typeof signUp>>, TError, { data: BodyType<SignUpBodyDto> }, TContext> => {
  const mutationOptions = getSignUpMutationOptions(options)

  return useMutation(mutationOptions)
}
export const updateOwnUser = (
  updateOwnUserBodyDto: BodyType<UpdateOwnUserBodyDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UpdateOwnUserResponseDto>(
    {
      url: `http://localhost:3333/user/update-own`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateOwnUserBodyDto,
    },
    options,
  )
}

export const getUpdateOwnUserMutationOptions = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateOwnUser>>,
    TError,
    { data: BodyType<UpdateOwnUserBodyDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateOwnUser>>,
  TError,
  { data: BodyType<UpdateOwnUserBodyDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateOwnUser>>,
    { data: BodyType<UpdateOwnUserBodyDto> }
  > = (props) => {
    const { data } = props ?? {}

    return updateOwnUser(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateOwnUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateOwnUser>>>
export type UpdateOwnUserMutationBody = BodyType<UpdateOwnUserBodyDto>
export type UpdateOwnUserMutationError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>

export const useUpdateOwnUser = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateOwnUser>>,
    TError,
    { data: BodyType<UpdateOwnUserBodyDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof updateOwnUser>>,
  TError,
  { data: BodyType<UpdateOwnUserBodyDto> },
  TContext
> => {
  const mutationOptions = getUpdateOwnUserMutationOptions(options)

  return useMutation(mutationOptions)
}
