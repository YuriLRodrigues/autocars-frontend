/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Auto Cars - Backend
 * Cars seller API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query'
import type { MutationFunction, UseMutationOptions, UseMutationResult } from '@tanstack/react-query'

import { customInstance } from '../../custom-instance'
import type { ErrorType, BodyType } from '../../custom-instance'
import type {
  SwaggerBadRequestDto,
  SwaggerResourceNotFoundDto,
  UpdateAddressBodyDto,
  UpdateAddressResponseDto,
} from '../schemas'

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const updateAddress = (
  updateAddressBodyDto: BodyType<UpdateAddressBodyDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UpdateAddressResponseDto>(
    {
      url: `http://localhost:3333/address`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateAddressBodyDto,
    },
    options,
  )
}

export const getUpdateAddressMutationOptions = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAddress>>,
    TError,
    { data: BodyType<UpdateAddressBodyDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAddress>>,
  TError,
  { data: BodyType<UpdateAddressBodyDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAddress>>,
    { data: BodyType<UpdateAddressBodyDto> }
  > = (props) => {
    const { data } = props ?? {}

    return updateAddress(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateAddressMutationResult = NonNullable<Awaited<ReturnType<typeof updateAddress>>>
export type UpdateAddressMutationBody = BodyType<UpdateAddressBodyDto>
export type UpdateAddressMutationError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>

export const useUpdateAddress = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAddress>>,
    TError,
    { data: BodyType<UpdateAddressBodyDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof updateAddress>>,
  TError,
  { data: BodyType<UpdateAddressBodyDto> },
  TContext
> => {
  const mutationOptions = getUpdateAddressMutationOptions(options)

  return useMutation(mutationOptions)
}
