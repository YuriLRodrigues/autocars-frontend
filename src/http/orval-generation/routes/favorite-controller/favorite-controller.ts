/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Auto Cars - Backend
 * Cars seller API
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type {
  FindAllFavorites200,
  FindAllFavoritesByUserId200,
  FindAllFavoritesByUserIdParams,
  FindAllFavoritesParams,
  SwaggerBadRequestDto,
  SwaggerResourceNotFoundDto,
} from '../../schemas'
import { customFetch } from '../../../custom-instance-fetch'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const getFindAllFavoritesByUserIdUrl = (params?: FindAllFavoritesByUserIdParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  return normalizedParams.size
    ? `http://localhost:3333/favorite?${normalizedParams.toString()}`
    : `http://localhost:3333/favorite`
}

export const findAllFavoritesByUserId = async (
  params?: FindAllFavoritesByUserIdParams,
  options?: RequestInit,
): Promise<FindAllFavoritesByUserId200> => {
  return customFetch<FindAllFavoritesByUserId200>(getFindAllFavoritesByUserIdUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getFindAllFavoritesByUserIdQueryKey = (params?: FindAllFavoritesByUserIdParams) => {
  return [`http://localhost:3333/favorite`, ...(params ? [params] : [])] as const
}

export const getFindAllFavoritesByUserIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findAllFavoritesByUserId>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllFavoritesByUserIdParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllFavoritesByUserIdQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllFavoritesByUserId>>> = ({ signal }) =>
    findAllFavoritesByUserId(params, { signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findAllFavoritesByUserId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllFavoritesByUserIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof findAllFavoritesByUserId>>
>
export type FindAllFavoritesByUserIdInfiniteQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAllFavoritesByUserIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllFavoritesByUserId>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params: undefined | FindAllFavoritesByUserIdParams,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllFavoritesByUserIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllFavoritesByUserId>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllFavoritesByUserIdParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllFavoritesByUserIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllFavoritesByUserId>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllFavoritesByUserIdParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllFavoritesByUserIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllFavoritesByUserId>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllFavoritesByUserIdParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllFavoritesByUserIdInfiniteQueryOptions(params, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAllFavoritesByUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllFavoritesByUserId>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllFavoritesByUserIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllFavoritesByUserIdQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllFavoritesByUserId>>> = ({ signal }) =>
    findAllFavoritesByUserId(params, { signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllFavoritesByUserId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllFavoritesByUserIdQueryResult = NonNullable<Awaited<ReturnType<typeof findAllFavoritesByUserId>>>
export type FindAllFavoritesByUserIdQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAllFavoritesByUserId<
  TData = Awaited<ReturnType<typeof findAllFavoritesByUserId>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params: undefined | FindAllFavoritesByUserIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllFavoritesByUserId<
  TData = Awaited<ReturnType<typeof findAllFavoritesByUserId>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllFavoritesByUserIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllFavoritesByUserId<
  TData = Awaited<ReturnType<typeof findAllFavoritesByUserId>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllFavoritesByUserIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllFavoritesByUserId<
  TData = Awaited<ReturnType<typeof findAllFavoritesByUserId>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllFavoritesByUserIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavoritesByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllFavoritesByUserIdQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAllFavoritesUrl = (params?: FindAllFavoritesParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  return normalizedParams.size
    ? `http://localhost:3333/favorite/admin?${normalizedParams.toString()}`
    : `http://localhost:3333/favorite/admin`
}

export const findAllFavorites = async (
  params?: FindAllFavoritesParams,
  options?: RequestInit,
): Promise<FindAllFavorites200> => {
  return customFetch<FindAllFavorites200>(getFindAllFavoritesUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getFindAllFavoritesQueryKey = (params?: FindAllFavoritesParams) => {
  return [`http://localhost:3333/favorite/admin`, ...(params ? [params] : [])] as const
}

export const getFindAllFavoritesInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findAllFavorites>>>,
  TError = SwaggerBadRequestDto,
>(
  params?: FindAllFavoritesParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllFavoritesQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllFavorites>>> = ({ signal }) =>
    findAllFavorites(params, { signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findAllFavorites>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllFavoritesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findAllFavorites>>>
export type FindAllFavoritesInfiniteQueryError = SwaggerBadRequestDto

export function useFindAllFavoritesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllFavorites>>>,
  TError = SwaggerBadRequestDto,
>(
  params: undefined | FindAllFavoritesParams,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllFavoritesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllFavorites>>>,
  TError = SwaggerBadRequestDto,
>(
  params?: FindAllFavoritesParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllFavoritesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllFavorites>>>,
  TError = SwaggerBadRequestDto,
>(
  params?: FindAllFavoritesParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllFavoritesInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllFavorites>>>,
  TError = SwaggerBadRequestDto,
>(
  params?: FindAllFavoritesParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllFavoritesInfiniteQueryOptions(params, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAllFavoritesQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllFavorites>>,
  TError = SwaggerBadRequestDto,
>(
  params?: FindAllFavoritesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllFavoritesQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllFavorites>>> = ({ signal }) =>
    findAllFavorites(params, { signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllFavorites>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllFavoritesQueryResult = NonNullable<Awaited<ReturnType<typeof findAllFavorites>>>
export type FindAllFavoritesQueryError = SwaggerBadRequestDto

export function useFindAllFavorites<
  TData = Awaited<ReturnType<typeof findAllFavorites>>,
  TError = SwaggerBadRequestDto,
>(
  params: undefined | FindAllFavoritesParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>> &
      Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllFavorites<
  TData = Awaited<ReturnType<typeof findAllFavorites>>,
  TError = SwaggerBadRequestDto,
>(
  params?: FindAllFavoritesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>> &
      Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>, 'initialData'>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllFavorites<
  TData = Awaited<ReturnType<typeof findAllFavorites>>,
  TError = SwaggerBadRequestDto,
>(
  params?: FindAllFavoritesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllFavorites<
  TData = Awaited<ReturnType<typeof findAllFavorites>>,
  TError = SwaggerBadRequestDto,
>(
  params?: FindAllFavoritesParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllFavorites>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllFavoritesQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindDistinctFavoritesCountUrl = () => {
  return `http://localhost:3333/favorite/distinct-count`
}

export const findDistinctFavoritesCount = async (options?: RequestInit): Promise<number> => {
  return customFetch<number>(getFindDistinctFavoritesCountUrl(), {
    ...options,
    method: 'GET',
  })
}

export const getFindDistinctFavoritesCountQueryKey = () => {
  return [`http://localhost:3333/favorite/distinct-count`] as const
}

export const getFindDistinctFavoritesCountInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findDistinctFavoritesCount>>>,
  TError = SwaggerBadRequestDto,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindDistinctFavoritesCountQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findDistinctFavoritesCount>>> = ({ signal }) =>
    findDistinctFavoritesCount({ signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findDistinctFavoritesCount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindDistinctFavoritesCountInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof findDistinctFavoritesCount>>
>
export type FindDistinctFavoritesCountInfiniteQueryError = SwaggerBadRequestDto

export function useFindDistinctFavoritesCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findDistinctFavoritesCount>>>,
  TError = SwaggerBadRequestDto,
>(options: {
  query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>,
      'initialData'
    >
  request?: SecondParameter<typeof customFetch>
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindDistinctFavoritesCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findDistinctFavoritesCount>>>,
  TError = SwaggerBadRequestDto,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>,
      'initialData'
    >
  request?: SecondParameter<typeof customFetch>
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindDistinctFavoritesCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findDistinctFavoritesCount>>>,
  TError = SwaggerBadRequestDto,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindDistinctFavoritesCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findDistinctFavoritesCount>>>,
  TError = SwaggerBadRequestDto,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindDistinctFavoritesCountInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindDistinctFavoritesCountQueryOptions = <
  TData = Awaited<ReturnType<typeof findDistinctFavoritesCount>>,
  TError = SwaggerBadRequestDto,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindDistinctFavoritesCountQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findDistinctFavoritesCount>>> = ({ signal }) =>
    findDistinctFavoritesCount({ signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findDistinctFavoritesCount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindDistinctFavoritesCountQueryResult = NonNullable<Awaited<ReturnType<typeof findDistinctFavoritesCount>>>
export type FindDistinctFavoritesCountQueryError = SwaggerBadRequestDto

export function useFindDistinctFavoritesCount<
  TData = Awaited<ReturnType<typeof findDistinctFavoritesCount>>,
  TError = SwaggerBadRequestDto,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>,
      'initialData'
    >
  request?: SecondParameter<typeof customFetch>
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindDistinctFavoritesCount<
  TData = Awaited<ReturnType<typeof findDistinctFavoritesCount>>,
  TError = SwaggerBadRequestDto,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>,
      'initialData'
    >
  request?: SecondParameter<typeof customFetch>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindDistinctFavoritesCount<
  TData = Awaited<ReturnType<typeof findDistinctFavoritesCount>>,
  TError = SwaggerBadRequestDto,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindDistinctFavoritesCount<
  TData = Awaited<ReturnType<typeof findDistinctFavoritesCount>>,
  TError = SwaggerBadRequestDto,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findDistinctFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindDistinctFavoritesCountQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindFavoritesCountByAdvertisementUrl = (id: string) => {
  return `http://localhost:3333/favorite/count/${id}`
}

export const findFavoritesCountByAdvertisement = async (id: string, options?: RequestInit): Promise<number> => {
  return customFetch<number>(getFindFavoritesCountByAdvertisementUrl(id), {
    ...options,
    method: 'GET',
  })
}

export const getFindFavoritesCountByAdvertisementQueryKey = (id: string) => {
  return [`http://localhost:3333/favorite/count/${id}`] as const
}

export const getFindFavoritesCountByAdvertisementInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>>,
  TError = SwaggerBadRequestDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindFavoritesCountByAdvertisementQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>> = ({ signal }) =>
    findFavoritesCountByAdvertisement(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindFavoritesCountByAdvertisementInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>
>
export type FindFavoritesCountByAdvertisementInfiniteQueryError = SwaggerBadRequestDto

export function useFindFavoritesCountByAdvertisementInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>>,
  TError = SwaggerBadRequestDto,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindFavoritesCountByAdvertisementInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>>,
  TError = SwaggerBadRequestDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindFavoritesCountByAdvertisementInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>>,
  TError = SwaggerBadRequestDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindFavoritesCountByAdvertisementInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>>,
  TError = SwaggerBadRequestDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindFavoritesCountByAdvertisementInfiniteQueryOptions(id, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindFavoritesCountByAdvertisementQueryOptions = <
  TData = Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>,
  TError = SwaggerBadRequestDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindFavoritesCountByAdvertisementQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>> = ({ signal }) =>
    findFavoritesCountByAdvertisement(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindFavoritesCountByAdvertisementQueryResult = NonNullable<
  Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>
>
export type FindFavoritesCountByAdvertisementQueryError = SwaggerBadRequestDto

export function useFindFavoritesCountByAdvertisement<
  TData = Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>,
  TError = SwaggerBadRequestDto,
>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindFavoritesCountByAdvertisement<
  TData = Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>,
  TError = SwaggerBadRequestDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindFavoritesCountByAdvertisement<
  TData = Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>,
  TError = SwaggerBadRequestDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindFavoritesCountByAdvertisement<
  TData = Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>,
  TError = SwaggerBadRequestDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCountByAdvertisement>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindFavoritesCountByAdvertisementQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindFavoritesCountUrl = () => {
  return `http://localhost:3333/favorite/count`
}

export const findFavoritesCount = async (options?: RequestInit): Promise<number> => {
  return customFetch<number>(getFindFavoritesCountUrl(), {
    ...options,
    method: 'GET',
  })
}

export const getFindFavoritesCountQueryKey = () => {
  return [`http://localhost:3333/favorite/count`] as const
}

export const getFindFavoritesCountInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findFavoritesCount>>>,
  TError = SwaggerBadRequestDto,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindFavoritesCountQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findFavoritesCount>>> = ({ signal }) =>
    findFavoritesCount({ signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findFavoritesCount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindFavoritesCountInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findFavoritesCount>>>
export type FindFavoritesCountInfiniteQueryError = SwaggerBadRequestDto

export function useFindFavoritesCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findFavoritesCount>>>,
  TError = SwaggerBadRequestDto,
>(options: {
  query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>, 'initialData'>
  request?: SecondParameter<typeof customFetch>
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindFavoritesCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findFavoritesCount>>>,
  TError = SwaggerBadRequestDto,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>, 'initialData'>
  request?: SecondParameter<typeof customFetch>
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindFavoritesCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findFavoritesCount>>>,
  TError = SwaggerBadRequestDto,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindFavoritesCountInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findFavoritesCount>>>,
  TError = SwaggerBadRequestDto,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindFavoritesCountInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindFavoritesCountQueryOptions = <
  TData = Awaited<ReturnType<typeof findFavoritesCount>>,
  TError = SwaggerBadRequestDto,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindFavoritesCountQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findFavoritesCount>>> = ({ signal }) =>
    findFavoritesCount({ signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findFavoritesCount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindFavoritesCountQueryResult = NonNullable<Awaited<ReturnType<typeof findFavoritesCount>>>
export type FindFavoritesCountQueryError = SwaggerBadRequestDto

export function useFindFavoritesCount<
  TData = Awaited<ReturnType<typeof findFavoritesCount>>,
  TError = SwaggerBadRequestDto,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>, 'initialData'>
  request?: SecondParameter<typeof customFetch>
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindFavoritesCount<
  TData = Awaited<ReturnType<typeof findFavoritesCount>>,
  TError = SwaggerBadRequestDto,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>, 'initialData'>
  request?: SecondParameter<typeof customFetch>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindFavoritesCount<
  TData = Awaited<ReturnType<typeof findFavoritesCount>>,
  TError = SwaggerBadRequestDto,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindFavoritesCount<
  TData = Awaited<ReturnType<typeof findFavoritesCount>>,
  TError = SwaggerBadRequestDto,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findFavoritesCount>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindFavoritesCountQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getHandleFavoriteUrl = (id: string) => {
  return `http://localhost:3333/favorite/handle-favorite/${id}`
}

export const handleFavorite = async (id: string, options?: RequestInit): Promise<string> => {
  return customFetch<string>(getHandleFavoriteUrl(id), {
    ...options,
    method: 'PATCH',
  })
}

export const getHandleFavoriteMutationOptions = <
  TData = Awaited<ReturnType<typeof handleFavorite>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customFetch>
}) => {
  const mutationKey = ['handleFavorite']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof handleFavorite>>, { id: string }> = (props) => {
    const { id } = props ?? {}

    return handleFavorite(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError, { id: string }, TContext>
}

export type HandleFavoriteMutationResult = NonNullable<Awaited<ReturnType<typeof handleFavorite>>>

export type HandleFavoriteMutationError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export const useHandleFavorite = <
  TData = Awaited<ReturnType<typeof handleFavorite>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customFetch>
}): UseMutationResult<TData, TError, { id: string }, TContext> => {
  const mutationOptions = getHandleFavoriteMutationOptions(options)

  return useMutation(mutationOptions)
}
