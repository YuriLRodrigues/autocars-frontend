/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Auto Cars - Backend
 * Cars seller API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker'
import { HttpResponse, delay, http } from 'msw'

import type { HandleAdvertisementLikeResponseDto, HandleFeedbackLikeResponseDto } from '../../schemas'

export const getFindAdIsLikedResponseMock = (): boolean => faker.datatype.boolean()

export const getFindAllAdvertisementLikesResponseMock = (): number => faker.number.int()

export const getHandleAdvertisementLikeResponseMock = (
  overrideResponse: Partial<HandleAdvertisementLikeResponseDto> = {},
): HandleAdvertisementLikeResponseDto => ({ message: faker.string.alpha(20), ...overrideResponse })

export const getFindFeedbackIsLikedResponseMock = (): boolean => faker.datatype.boolean()

export const getFindAllFeedbackLikesResponseMock = (): number => faker.number.int()

export const getHandleFeedbackLikeResponseMock = (
  overrideResponse: Partial<HandleFeedbackLikeResponseDto> = {},
): HandleFeedbackLikeResponseDto => ({ message: faker.string.alpha(20), ...overrideResponse })

export const getFindAdIsLikedMockHandler = (
  overrideResponse?: boolean | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<boolean> | boolean),
) => {
  return http.get('*/like/ad/is-liked/:id', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getFindAdIsLikedResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getFindAllAdvertisementLikesMockHandler = (
  overrideResponse?: number | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<number> | number),
) => {
  return http.get('*/like/ad/likes-count/:id', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getFindAllAdvertisementLikesResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getHandleAdvertisementLikeMockHandler = (
  overrideResponse?:
    | HandleAdvertisementLikeResponseDto
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<HandleAdvertisementLikeResponseDto> | HandleAdvertisementLikeResponseDto),
) => {
  return http.patch('*/like/ad/handle-like/:id', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getHandleAdvertisementLikeResponseMock(),
      ),
      { status: 201, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getFindFeedbackIsLikedMockHandler = (
  overrideResponse?: boolean | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<boolean> | boolean),
) => {
  return http.get('*/like/fb/is-liked/:id', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getFindFeedbackIsLikedResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getFindAllFeedbackLikesMockHandler = (
  overrideResponse?: number | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<number> | number),
) => {
  return http.get('*/like/fb/likes-count/:id', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getFindAllFeedbackLikesResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getHandleFeedbackLikeMockHandler = (
  overrideResponse?:
    | HandleFeedbackLikeResponseDto
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<HandleFeedbackLikeResponseDto> | HandleFeedbackLikeResponseDto),
) => {
  return http.patch('*/like/fb/handle-like/:id', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getHandleFeedbackLikeResponseMock(),
      ),
      { status: 201, headers: { 'Content-Type': 'application/json' } },
    )
  })
}
export const getLikeControllerMock = () => [
  getFindAdIsLikedMockHandler(),
  getFindAllAdvertisementLikesMockHandler(),
  getHandleAdvertisementLikeMockHandler(),
  getFindFeedbackIsLikedMockHandler(),
  getFindAllFeedbackLikesMockHandler(),
  getHandleFeedbackLikeMockHandler(),
]
