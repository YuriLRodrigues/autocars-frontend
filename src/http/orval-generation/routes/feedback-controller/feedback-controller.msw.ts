/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Auto Cars - Backend
 * Cars seller API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from '@faker-js/faker'
import { HttpResponse, delay, http } from 'msw'

import type { CreateFeedbackByAdResponseDto, FindAllFeedbacksByAdId200 } from '../../schemas'

export const getFindAllFeedbacksByAdIdResponseMock = (): FindAllFeedbacksByAdId200 => ({
  meta: {
    page: faker.number.int({ min: undefined, max: undefined }),
    perPage: faker.number.int({ min: undefined, max: undefined }),
    totalCount: faker.number.int({ min: undefined, max: undefined }),
    totalPages: faker.number.int({ min: undefined, max: undefined }),
  },
  results: faker.helpers.arrayElement([
    Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
      id: faker.string.uuid(),
      title: faker.string.uuid(),
      user: {
        name: faker.string.alpha(20),
        avatar: faker.string.alpha(20),
        id: faker.string.alpha(20),
        address: {
          street: faker.string.alpha(20),
          city: faker.string.alpha(20),
          zipCode: faker.number.int({ min: undefined, max: undefined }),
        },
      },
      createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
      stars: faker.number.int({ min: undefined, max: undefined }),
      comment: faker.string.alpha(20),
      totalLikes: faker.number.int({ min: undefined, max: undefined }),
    })),
    undefined,
  ]),
})

export const getCreateFeedbackByAdIdResponseMock = (
  overrideResponse: Partial<CreateFeedbackByAdResponseDto> = {},
): CreateFeedbackByAdResponseDto => ({ message: faker.string.alpha(20), ...overrideResponse })

export const getFindAllFeedbacksByAdIdMockHandler = (
  overrideResponse?:
    | FindAllFeedbacksByAdId200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<FindAllFeedbacksByAdId200> | FindAllFeedbacksByAdId200),
) => {
  return http.get('*/feedback/ad/:id', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getFindAllFeedbacksByAdIdResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    )
  })
}

export const getCreateFeedbackByAdIdMockHandler = (
  overrideResponse?:
    | CreateFeedbackByAdResponseDto
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<CreateFeedbackByAdResponseDto> | CreateFeedbackByAdResponseDto),
) => {
  return http.post('*/feedback/ad/:id', async (info) => {
    await delay(1000)

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateFeedbackByAdIdResponseMock(),
      ),
      { status: 201, headers: { 'Content-Type': 'application/json' } },
    )
  })
}
export const getFeedbackControllerMock = () => [
  getFindAllFeedbacksByAdIdMockHandler(),
  getCreateFeedbackByAdIdMockHandler(),
]
