/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Auto Cars - Backend
 * Cars seller API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import { customInstance } from '../../custom-instance'
import type { ErrorType, BodyType } from '../../custom-instance'
import type {
  CreateBrandBodyDto,
  CreateBrandResponseDto,
  DeleteBrandResponseDto,
  FindAllBrandsResponseDto,
  SwaggerBadRequestDto,
  SwaggerNotAllowedDto,
  SwaggerResourceAlreadyExistsDto,
  SwaggerResourceNotFoundDto,
  UpdateBrandBodyDto,
  UpdateBrandResponseDto,
} from '../schemas'

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const createBrand = (
  createBrandBodyDto: BodyType<CreateBrandBodyDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<CreateBrandResponseDto>(
    {
      url: `http://localhost:3333/brand`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createBrandBodyDto,
      signal,
    },
    options,
  )
}

export const getCreateBrandMutationOptions = <
  TError = ErrorType<
    SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto | SwaggerResourceAlreadyExistsDto
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createBrand>>,
    TError,
    { data: BodyType<CreateBrandBodyDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createBrand>>,
  TError,
  { data: BodyType<CreateBrandBodyDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createBrand>>,
    { data: BodyType<CreateBrandBodyDto> }
  > = (props) => {
    const { data } = props ?? {}

    return createBrand(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateBrandMutationResult = NonNullable<Awaited<ReturnType<typeof createBrand>>>
export type CreateBrandMutationBody = BodyType<CreateBrandBodyDto>
export type CreateBrandMutationError = ErrorType<
  SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto | SwaggerResourceAlreadyExistsDto
>

export const useCreateBrand = <
  TError = ErrorType<
    SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto | SwaggerResourceAlreadyExistsDto
  >,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createBrand>>,
    TError,
    { data: BodyType<CreateBrandBodyDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof createBrand>>,
  TError,
  { data: BodyType<CreateBrandBodyDto> },
  TContext
> => {
  const mutationOptions = getCreateBrandMutationOptions(options)

  return useMutation(mutationOptions)
}
export const updateBrand = (
  updateBrandBodyDto: BodyType<UpdateBrandBodyDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UpdateBrandResponseDto>(
    {
      url: `http://localhost:3333/brand`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: updateBrandBodyDto,
    },
    options,
  )
}

export const getUpdateBrandMutationOptions = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateBrand>>,
    TError,
    { data: BodyType<UpdateBrandBodyDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateBrand>>,
  TError,
  { data: BodyType<UpdateBrandBodyDto> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateBrand>>,
    { data: BodyType<UpdateBrandBodyDto> }
  > = (props) => {
    const { data } = props ?? {}

    return updateBrand(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateBrandMutationResult = NonNullable<Awaited<ReturnType<typeof updateBrand>>>
export type UpdateBrandMutationBody = BodyType<UpdateBrandBodyDto>
export type UpdateBrandMutationError = ErrorType<
  SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto
>

export const useUpdateBrand = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateBrand>>,
    TError,
    { data: BodyType<UpdateBrandBodyDto> },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof updateBrand>>,
  TError,
  { data: BodyType<UpdateBrandBodyDto> },
  TContext
> => {
  const mutationOptions = getUpdateBrandMutationOptions(options)

  return useMutation(mutationOptions)
}
export const findAllBrands = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<FindAllBrandsResponseDto>(
    { url: `http://localhost:3333/brand`, method: 'GET', signal },
    options,
  )
}

export const getFindAllBrandsQueryKey = () => {
  return [`http://localhost:3333/brand`] as const
}

export const getFindAllBrandsQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllBrands>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllBrands>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllBrandsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllBrands>>> = ({ signal }) =>
    findAllBrands(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllBrands>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type FindAllBrandsQueryResult = NonNullable<Awaited<ReturnType<typeof findAllBrands>>>
export type FindAllBrandsQueryError = ErrorType<SwaggerBadRequestDto>

export function useFindAllBrands<
  TData = Awaited<ReturnType<typeof findAllBrands>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllBrands>>, TError, TData>> &
    Pick<DefinedInitialDataOptions<Awaited<ReturnType<typeof findAllBrands>>, TError, TData>, 'initialData'>
  request?: SecondParameter<typeof customInstance>
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAllBrands<
  TData = Awaited<ReturnType<typeof findAllBrands>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllBrands>>, TError, TData>> &
    Pick<UndefinedInitialDataOptions<Awaited<ReturnType<typeof findAllBrands>>, TError, TData>, 'initialData'>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useFindAllBrands<
  TData = Awaited<ReturnType<typeof findAllBrands>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllBrands>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

export function useFindAllBrands<
  TData = Awaited<ReturnType<typeof findAllBrands>>,
  TError = ErrorType<SwaggerBadRequestDto>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllBrands>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getFindAllBrandsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const deleteBrand = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<DeleteBrandResponseDto>({ url: `http://localhost:3333/brand/${id}`, method: 'DELETE' }, options)
}

export const getDeleteBrandMutationOptions = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteBrand>>, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<Awaited<ReturnType<typeof deleteBrand>>, TError, { id: string }, TContext> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteBrand>>, { id: string }> = (props) => {
    const { id } = props ?? {}

    return deleteBrand(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteBrandMutationResult = NonNullable<Awaited<ReturnType<typeof deleteBrand>>>

export type DeleteBrandMutationError = ErrorType<
  SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto
>

export const useDeleteBrand = <
  TError = ErrorType<SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteBrand>>, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationResult<Awaited<ReturnType<typeof deleteBrand>>, TError, { id: string }, TContext> => {
  const mutationOptions = getDeleteBrandMutationOptions(options)

  return useMutation(mutationOptions)
}
