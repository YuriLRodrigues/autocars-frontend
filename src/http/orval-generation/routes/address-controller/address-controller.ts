/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Auto Cars - Backend
 * Cars seller API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query'
import type { MutationFunction, UseMutationOptions, UseMutationResult } from '@tanstack/react-query'
import type {
  SwaggerBadRequestDto,
  SwaggerResourceNotFoundDto,
  UpdateAddressBodyDto,
  UpdateAddressResponseDto,
} from '../../schemas'
import { customFetch } from '../../../custom-instance-fetch'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const getUpdateAddressUrl = () => {
  return `http://localhost:3333/address`
}

export const updateAddress = async (
  updateAddressBodyDto: UpdateAddressBodyDto,
  options?: RequestInit,
): Promise<UpdateAddressResponseDto> => {
  return customFetch<UpdateAddressResponseDto>(getUpdateAddressUrl(), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateAddressBodyDto),
  })
}

export const getUpdateAddressMutationOptions = <
  TData = Awaited<ReturnType<typeof updateAddress>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: UpdateAddressBodyDto }, TContext>
  request?: SecondParameter<typeof customFetch>
}) => {
  const mutationKey = ['updateAddress']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAddress>>, { data: UpdateAddressBodyDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return updateAddress(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: UpdateAddressBodyDto },
    TContext
  >
}

export type UpdateAddressMutationResult = NonNullable<Awaited<ReturnType<typeof updateAddress>>>
export type UpdateAddressMutationBody = UpdateAddressBodyDto
export type UpdateAddressMutationError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export const useUpdateAddress = <
  TData = Awaited<ReturnType<typeof updateAddress>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: UpdateAddressBodyDto }, TContext>
  request?: SecondParameter<typeof customFetch>
}): UseMutationResult<TData, TError, { data: UpdateAddressBodyDto }, TContext> => {
  const mutationOptions = getUpdateAddressMutationOptions(options)

  return useMutation(mutationOptions)
}
