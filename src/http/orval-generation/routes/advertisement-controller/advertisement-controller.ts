/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Auto Cars - Backend
 * Cars seller API
 * OpenAPI spec version: 1.0.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import { customFetch } from '../../../custom-instance-fetch'
import type {
  CreateAdBodyDto,
  CreateAdResponseDto,
  DeletedAdResponseDto,
  FindAdByIdResponseDto,
  FindAdvertisementsMetricsByUserIdResponseDto,
  FindAdvertisementsMetricsResponseDto,
  FindAllAdvertisements200,
  FindAllAdvertisementsByUserId200,
  FindAllAdvertisementsByUserIdParams,
  FindAllAdvertisementsParams,
  FindAllManagerAdvertisements200,
  FindAllManagerAdvertisementsParams,
  FindAllOwnAdvertisements200,
  FindAllOwnAdvertisementsParams,
  FindAllSoldAdsParams,
  FindAllSoldAdsResponseDto,
  MinimalAdvertisementDetailsDto,
  SwaggerBadRequestDto,
  SwaggerNotAllowedDto,
  SwaggerResourceNotFoundDto,
  UpdateAdDTO,
  UpdateSalePriceDTO,
} from '../../schemas'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

export const getCreateAdvertisementUrl = () => {
  return `/advertisement`
}

export const createAdvertisement = async (
  createAdBodyDto: CreateAdBodyDto,
  options?: RequestInit,
): Promise<CreateAdResponseDto> => {
  return customFetch<CreateAdResponseDto>(getCreateAdvertisementUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createAdBodyDto),
  })
}

export const getCreateAdvertisementMutationOptions = <
  TError = SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAdvertisement>>,
    TError,
    { data: CreateAdBodyDto },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAdvertisement>>,
  TError,
  { data: CreateAdBodyDto },
  TContext
> => {
  const mutationKey = ['createAdvertisement']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAdvertisement>>, { data: CreateAdBodyDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return createAdvertisement(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateAdvertisementMutationResult = NonNullable<Awaited<ReturnType<typeof createAdvertisement>>>
export type CreateAdvertisementMutationBody = CreateAdBodyDto
export type CreateAdvertisementMutationError = SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto

export const useCreateAdvertisement = <
  TError = SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAdvertisement>>,
    TError,
    { data: CreateAdBodyDto },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationResult<Awaited<ReturnType<typeof createAdvertisement>>, TError, { data: CreateAdBodyDto }, TContext> => {
  const mutationOptions = getCreateAdvertisementMutationOptions(options)

  return useMutation(mutationOptions)
}
export const getDeleteAdvertisementUrl = (id: string) => {
  return `/advertisement/${id}`
}

export const deleteAdvertisement = async (id: string, options?: RequestInit): Promise<DeletedAdResponseDto> => {
  return customFetch<DeletedAdResponseDto>(getDeleteAdvertisementUrl(id), {
    ...options,
    method: 'DELETE',
  })
}

export const getDeleteAdvertisementMutationOptions = <
  TError = SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteAdvertisement>>, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<Awaited<ReturnType<typeof deleteAdvertisement>>, TError, { id: string }, TContext> => {
  const mutationKey = ['deleteAdvertisement']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdvertisement>>, { id: string }> = (props) => {
    const { id } = props ?? {}

    return deleteAdvertisement(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteAdvertisementMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdvertisement>>>

export type DeleteAdvertisementMutationError = SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto

export const useDeleteAdvertisement = <
  TError = SwaggerBadRequestDto | SwaggerNotAllowedDto | SwaggerResourceNotFoundDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteAdvertisement>>, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customFetch>
}): UseMutationResult<Awaited<ReturnType<typeof deleteAdvertisement>>, TError, { id: string }, TContext> => {
  const mutationOptions = getDeleteAdvertisementMutationOptions(options)

  return useMutation(mutationOptions)
}
export const getFindAdByIdUrl = (id: string) => {
  return `/advertisement/details/${id}`
}

export const findAdById = async (id: string, options?: RequestInit): Promise<FindAdByIdResponseDto> => {
  return customFetch<FindAdByIdResponseDto>(getFindAdByIdUrl(id), {
    ...options,
    method: 'GET',
  })
}

export const getFindAdByIdQueryKey = (id: string) => {
  return [`/advertisement/details/${id}`] as const
}

export const getFindAdByIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findAdById>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdById>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAdByIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAdById>>> = ({ signal }) =>
    findAdById(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findAdById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAdByIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findAdById>>>
export type FindAdByIdInfiniteQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAdByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdById>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAdById>>,
          TError,
          Awaited<ReturnType<typeof findAdById>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdById>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAdById>>,
          TError,
          Awaited<ReturnType<typeof findAdById>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdById>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdById>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAdByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdById>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdById>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAdByIdInfiniteQueryOptions(id, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAdByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof findAdById>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdById>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAdByIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAdById>>> = ({ signal }) =>
    findAdById(id, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!id, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAdById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAdByIdQueryResult = NonNullable<Awaited<ReturnType<typeof findAdById>>>
export type FindAdByIdQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAdById<
  TData = Awaited<ReturnType<typeof findAdById>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdById>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAdById>>,
          TError,
          Awaited<ReturnType<typeof findAdById>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdById<
  TData = Awaited<ReturnType<typeof findAdById>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdById>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAdById>>,
          TError,
          Awaited<ReturnType<typeof findAdById>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdById<
  TData = Awaited<ReturnType<typeof findAdById>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdById>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAdById<
  TData = Awaited<ReturnType<typeof findAdById>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdById>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAdByIdQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAllAdvertisementsByUserIdUrl = (userId: string, params?: FindAllAdvertisementsByUserIdParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  return normalizedParams.size
    ? `/advertisement/all/by-user/${userId}?${normalizedParams.toString()}`
    : `/advertisement/all/by-user/${userId}`
}

export const findAllAdvertisementsByUserId = async (
  userId: string,
  params?: FindAllAdvertisementsByUserIdParams,
  options?: RequestInit,
): Promise<FindAllAdvertisementsByUserId200> => {
  return customFetch<FindAllAdvertisementsByUserId200>(getFindAllAdvertisementsByUserIdUrl(userId, params), {
    ...options,
    method: 'GET',
  })
}

export const getFindAllAdvertisementsByUserIdQueryKey = (
  userId: string,
  params?: FindAllAdvertisementsByUserIdParams,
) => {
  return [`/advertisement/all/by-user/${userId}`, ...(params ? [params] : [])] as const
}

export const getFindAllAdvertisementsByUserIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  userId: string,
  params?: FindAllAdvertisementsByUserIdParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllAdvertisementsByUserIdQueryKey(userId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>> = ({ signal }) =>
    findAllAdvertisementsByUserId(userId, params, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!userId, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllAdvertisementsByUserIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>
>
export type FindAllAdvertisementsByUserIdInfiniteQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAllAdvertisementsByUserIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  userId: string,
  params: undefined | FindAllAdvertisementsByUserIdParams,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>,
          TError,
          Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllAdvertisementsByUserIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  userId: string,
  params?: FindAllAdvertisementsByUserIdParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>,
          TError,
          Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllAdvertisementsByUserIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  userId: string,
  params?: FindAllAdvertisementsByUserIdParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllAdvertisementsByUserIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  userId: string,
  params?: FindAllAdvertisementsByUserIdParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllAdvertisementsByUserIdInfiniteQueryOptions(userId, params, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAllAdvertisementsByUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  userId: string,
  params?: FindAllAdvertisementsByUserIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllAdvertisementsByUserIdQueryKey(userId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>> = ({ signal }) =>
    findAllAdvertisementsByUserId(userId, params, { signal, ...requestOptions })

  return { queryKey, queryFn, enabled: !!userId, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllAdvertisementsByUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>
>
export type FindAllAdvertisementsByUserIdQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAllAdvertisementsByUserId<
  TData = Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  userId: string,
  params: undefined | FindAllAdvertisementsByUserIdParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>,
          TError,
          Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllAdvertisementsByUserId<
  TData = Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  userId: string,
  params?: FindAllAdvertisementsByUserIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>,
          TError,
          Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllAdvertisementsByUserId<
  TData = Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  userId: string,
  params?: FindAllAdvertisementsByUserIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllAdvertisementsByUserId<
  TData = Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  userId: string,
  params?: FindAllAdvertisementsByUserIdParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisementsByUserId>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllAdvertisementsByUserIdQueryOptions(userId, params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAllOwnAdvertisementsUrl = (params?: FindAllOwnAdvertisementsParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  return normalizedParams.size ? `/advertisement/all/own?${normalizedParams.toString()}` : `/advertisement/all/own`
}

export const findAllOwnAdvertisements = async (
  params?: FindAllOwnAdvertisementsParams,
  options?: RequestInit,
): Promise<FindAllOwnAdvertisements200> => {
  return customFetch<FindAllOwnAdvertisements200>(getFindAllOwnAdvertisementsUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getFindAllOwnAdvertisementsQueryKey = (params?: FindAllOwnAdvertisementsParams) => {
  return [`/advertisement/all/own`, ...(params ? [params] : [])] as const
}

export const getFindAllOwnAdvertisementsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findAllOwnAdvertisements>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllOwnAdvertisementsParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllOwnAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllOwnAdvertisementsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllOwnAdvertisements>>> = ({ signal }) =>
    findAllOwnAdvertisements(params, { signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findAllOwnAdvertisements>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllOwnAdvertisementsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof findAllOwnAdvertisements>>
>
export type FindAllOwnAdvertisementsInfiniteQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAllOwnAdvertisementsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllOwnAdvertisements>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params: undefined | FindAllOwnAdvertisementsParams,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllOwnAdvertisements>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllOwnAdvertisements>>,
          TError,
          Awaited<ReturnType<typeof findAllOwnAdvertisements>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllOwnAdvertisementsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllOwnAdvertisements>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllOwnAdvertisementsParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllOwnAdvertisements>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllOwnAdvertisements>>,
          TError,
          Awaited<ReturnType<typeof findAllOwnAdvertisements>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllOwnAdvertisementsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllOwnAdvertisements>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllOwnAdvertisementsParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllOwnAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllOwnAdvertisementsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllOwnAdvertisements>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllOwnAdvertisementsParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllOwnAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllOwnAdvertisementsInfiniteQueryOptions(params, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAllOwnAdvertisementsQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllOwnAdvertisements>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllOwnAdvertisementsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllOwnAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllOwnAdvertisementsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllOwnAdvertisements>>> = ({ signal }) =>
    findAllOwnAdvertisements(params, { signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllOwnAdvertisements>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllOwnAdvertisementsQueryResult = NonNullable<Awaited<ReturnType<typeof findAllOwnAdvertisements>>>
export type FindAllOwnAdvertisementsQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAllOwnAdvertisements<
  TData = Awaited<ReturnType<typeof findAllOwnAdvertisements>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params: undefined | FindAllOwnAdvertisementsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllOwnAdvertisements>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllOwnAdvertisements>>,
          TError,
          Awaited<ReturnType<typeof findAllOwnAdvertisements>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllOwnAdvertisements<
  TData = Awaited<ReturnType<typeof findAllOwnAdvertisements>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllOwnAdvertisementsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllOwnAdvertisements>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllOwnAdvertisements>>,
          TError,
          Awaited<ReturnType<typeof findAllOwnAdvertisements>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllOwnAdvertisements<
  TData = Awaited<ReturnType<typeof findAllOwnAdvertisements>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllOwnAdvertisementsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllOwnAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllOwnAdvertisements<
  TData = Awaited<ReturnType<typeof findAllOwnAdvertisements>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllOwnAdvertisementsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllOwnAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllOwnAdvertisementsQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAllManagerAdvertisementsUrl = (params?: FindAllManagerAdvertisementsParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  return normalizedParams.size
    ? `/advertisement/all/manager?${normalizedParams.toString()}`
    : `/advertisement/all/manager`
}

export const findAllManagerAdvertisements = async (
  params?: FindAllManagerAdvertisementsParams,
  options?: RequestInit,
): Promise<FindAllManagerAdvertisements200> => {
  return customFetch<FindAllManagerAdvertisements200>(getFindAllManagerAdvertisementsUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getFindAllManagerAdvertisementsQueryKey = (params?: FindAllManagerAdvertisementsParams) => {
  return [`/advertisement/all/manager`, ...(params ? [params] : [])] as const
}

export const getFindAllManagerAdvertisementsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findAllManagerAdvertisements>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllManagerAdvertisementsParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllManagerAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllManagerAdvertisementsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllManagerAdvertisements>>> = ({ signal }) =>
    findAllManagerAdvertisements(params, { signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findAllManagerAdvertisements>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllManagerAdvertisementsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof findAllManagerAdvertisements>>
>
export type FindAllManagerAdvertisementsInfiniteQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAllManagerAdvertisementsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllManagerAdvertisements>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params: undefined | FindAllManagerAdvertisementsParams,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllManagerAdvertisements>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllManagerAdvertisements>>,
          TError,
          Awaited<ReturnType<typeof findAllManagerAdvertisements>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllManagerAdvertisementsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllManagerAdvertisements>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllManagerAdvertisementsParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllManagerAdvertisements>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllManagerAdvertisements>>,
          TError,
          Awaited<ReturnType<typeof findAllManagerAdvertisements>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllManagerAdvertisementsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllManagerAdvertisements>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllManagerAdvertisementsParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllManagerAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllManagerAdvertisementsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllManagerAdvertisements>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllManagerAdvertisementsParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllManagerAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllManagerAdvertisementsInfiniteQueryOptions(params, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAllManagerAdvertisementsQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllManagerAdvertisements>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllManagerAdvertisementsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllManagerAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllManagerAdvertisementsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllManagerAdvertisements>>> = ({ signal }) =>
    findAllManagerAdvertisements(params, { signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllManagerAdvertisements>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllManagerAdvertisementsQueryResult = NonNullable<
  Awaited<ReturnType<typeof findAllManagerAdvertisements>>
>
export type FindAllManagerAdvertisementsQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAllManagerAdvertisements<
  TData = Awaited<ReturnType<typeof findAllManagerAdvertisements>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params: undefined | FindAllManagerAdvertisementsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllManagerAdvertisements>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllManagerAdvertisements>>,
          TError,
          Awaited<ReturnType<typeof findAllManagerAdvertisements>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllManagerAdvertisements<
  TData = Awaited<ReturnType<typeof findAllManagerAdvertisements>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllManagerAdvertisementsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllManagerAdvertisements>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllManagerAdvertisements>>,
          TError,
          Awaited<ReturnType<typeof findAllManagerAdvertisements>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllManagerAdvertisements<
  TData = Awaited<ReturnType<typeof findAllManagerAdvertisements>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllManagerAdvertisementsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllManagerAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllManagerAdvertisements<
  TData = Awaited<ReturnType<typeof findAllManagerAdvertisements>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params?: FindAllManagerAdvertisementsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllManagerAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllManagerAdvertisementsQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAdvertisementsMetricsByUserIdUrl = () => {
  return `/advertisement/owner-metrics`
}

export const findAdvertisementsMetricsByUserId = async (
  options?: RequestInit,
): Promise<FindAdvertisementsMetricsByUserIdResponseDto> => {
  return customFetch<FindAdvertisementsMetricsByUserIdResponseDto>(getFindAdvertisementsMetricsByUserIdUrl(), {
    ...options,
    method: 'GET',
  })
}

export const getFindAdvertisementsMetricsByUserIdQueryKey = () => {
  return [`/advertisement/owner-metrics`] as const
}

export const getFindAdvertisementsMetricsByUserIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAdvertisementsMetricsByUserIdQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>> = ({ signal }) =>
    findAdvertisementsMetricsByUserId({ signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAdvertisementsMetricsByUserIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>
>
export type FindAdvertisementsMetricsByUserIdInfiniteQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAdvertisementsMetricsByUserIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(options: {
  query: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>,
        TError,
        Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customFetch>
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdvertisementsMetricsByUserIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>,
        TError,
        Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customFetch>
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdvertisementsMetricsByUserIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAdvertisementsMetricsByUserIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAdvertisementsMetricsByUserIdInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAdvertisementsMetricsByUserIdQueryOptions = <
  TData = Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAdvertisementsMetricsByUserIdQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>> = ({ signal }) =>
    findAdvertisementsMetricsByUserId({ signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAdvertisementsMetricsByUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>
>
export type FindAdvertisementsMetricsByUserIdQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAdvertisementsMetricsByUserId<
  TData = Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>,
        TError,
        Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customFetch>
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdvertisementsMetricsByUserId<
  TData = Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>,
        TError,
        Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customFetch>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdvertisementsMetricsByUserId<
  TData = Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAdvertisementsMetricsByUserId<
  TData = Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetricsByUserId>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAdvertisementsMetricsByUserIdQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAdvertisementsMetricsUrl = () => {
  return `/advertisement/admin-metrics`
}

export const findAdvertisementsMetrics = async (
  options?: RequestInit,
): Promise<FindAdvertisementsMetricsResponseDto> => {
  return customFetch<FindAdvertisementsMetricsResponseDto>(getFindAdvertisementsMetricsUrl(), {
    ...options,
    method: 'GET',
  })
}

export const getFindAdvertisementsMetricsQueryKey = () => {
  return [`/advertisement/admin-metrics`] as const
}

export const getFindAdvertisementsMetricsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findAdvertisementsMetrics>>>,
  TError = SwaggerNotAllowedDto | SwaggerResourceNotFoundDto,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetrics>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAdvertisementsMetricsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAdvertisementsMetrics>>> = ({ signal }) =>
    findAdvertisementsMetrics({ signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findAdvertisementsMetrics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAdvertisementsMetricsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof findAdvertisementsMetrics>>
>
export type FindAdvertisementsMetricsInfiniteQueryError = SwaggerNotAllowedDto | SwaggerResourceNotFoundDto

export function useFindAdvertisementsMetricsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdvertisementsMetrics>>>,
  TError = SwaggerNotAllowedDto | SwaggerResourceNotFoundDto,
>(options: {
  query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetrics>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof findAdvertisementsMetrics>>,
        TError,
        Awaited<ReturnType<typeof findAdvertisementsMetrics>>
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customFetch>
}): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdvertisementsMetricsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdvertisementsMetrics>>>,
  TError = SwaggerNotAllowedDto | SwaggerResourceNotFoundDto,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetrics>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof findAdvertisementsMetrics>>,
        TError,
        Awaited<ReturnType<typeof findAdvertisementsMetrics>>
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customFetch>
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdvertisementsMetricsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdvertisementsMetrics>>>,
  TError = SwaggerNotAllowedDto | SwaggerResourceNotFoundDto,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetrics>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAdvertisementsMetricsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAdvertisementsMetrics>>>,
  TError = SwaggerNotAllowedDto | SwaggerResourceNotFoundDto,
>(options?: {
  query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetrics>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAdvertisementsMetricsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAdvertisementsMetricsQueryOptions = <
  TData = Awaited<ReturnType<typeof findAdvertisementsMetrics>>,
  TError = SwaggerNotAllowedDto | SwaggerResourceNotFoundDto,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetrics>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAdvertisementsMetricsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAdvertisementsMetrics>>> = ({ signal }) =>
    findAdvertisementsMetrics({ signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAdvertisementsMetrics>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAdvertisementsMetricsQueryResult = NonNullable<Awaited<ReturnType<typeof findAdvertisementsMetrics>>>
export type FindAdvertisementsMetricsQueryError = SwaggerNotAllowedDto | SwaggerResourceNotFoundDto

export function useFindAdvertisementsMetrics<
  TData = Awaited<ReturnType<typeof findAdvertisementsMetrics>>,
  TError = SwaggerNotAllowedDto | SwaggerResourceNotFoundDto,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetrics>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof findAdvertisementsMetrics>>,
        TError,
        Awaited<ReturnType<typeof findAdvertisementsMetrics>>
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customFetch>
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdvertisementsMetrics<
  TData = Awaited<ReturnType<typeof findAdvertisementsMetrics>>,
  TError = SwaggerNotAllowedDto | SwaggerResourceNotFoundDto,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetrics>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof findAdvertisementsMetrics>>,
        TError,
        Awaited<ReturnType<typeof findAdvertisementsMetrics>>
      >,
      'initialData'
    >
  request?: SecondParameter<typeof customFetch>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAdvertisementsMetrics<
  TData = Awaited<ReturnType<typeof findAdvertisementsMetrics>>,
  TError = SwaggerNotAllowedDto | SwaggerResourceNotFoundDto,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetrics>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAdvertisementsMetrics<
  TData = Awaited<ReturnType<typeof findAdvertisementsMetrics>>,
  TError = SwaggerNotAllowedDto | SwaggerResourceNotFoundDto,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAdvertisementsMetrics>>, TError, TData>>
  request?: SecondParameter<typeof customFetch>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAdvertisementsMetricsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAllAdvertisementsUrl = (params?: FindAllAdvertisementsParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  return normalizedParams.size ? `/advertisement/all?${normalizedParams.toString()}` : `/advertisement/all`
}

export const findAllAdvertisements = async (
  params?: FindAllAdvertisementsParams,
  options?: RequestInit,
): Promise<FindAllAdvertisements200> => {
  return customFetch<FindAllAdvertisements200>(getFindAllAdvertisementsUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getFindAllAdvertisementsQueryKey = (params?: FindAllAdvertisementsParams) => {
  return [`/advertisement/all`, ...(params ? [params] : [])] as const
}

export const getFindAllAdvertisementsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findAllAdvertisements>>>,
  TError = SwaggerBadRequestDto,
>(
  params?: FindAllAdvertisementsParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllAdvertisementsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllAdvertisements>>> = ({ signal }) =>
    findAllAdvertisements(params, { signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findAllAdvertisements>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllAdvertisementsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findAllAdvertisements>>>
export type FindAllAdvertisementsInfiniteQueryError = SwaggerBadRequestDto

export function useFindAllAdvertisementsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllAdvertisements>>>,
  TError = SwaggerBadRequestDto,
>(
  params: undefined | FindAllAdvertisementsParams,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllAdvertisements>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllAdvertisements>>,
          TError,
          Awaited<ReturnType<typeof findAllAdvertisements>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllAdvertisementsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllAdvertisements>>>,
  TError = SwaggerBadRequestDto,
>(
  params?: FindAllAdvertisementsParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllAdvertisements>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllAdvertisements>>,
          TError,
          Awaited<ReturnType<typeof findAllAdvertisements>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllAdvertisementsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllAdvertisements>>>,
  TError = SwaggerBadRequestDto,
>(
  params?: FindAllAdvertisementsParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllAdvertisementsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllAdvertisements>>>,
  TError = SwaggerBadRequestDto,
>(
  params?: FindAllAdvertisementsParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllAdvertisementsInfiniteQueryOptions(params, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAllAdvertisementsQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllAdvertisements>>,
  TError = SwaggerBadRequestDto,
>(
  params?: FindAllAdvertisementsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllAdvertisementsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllAdvertisements>>> = ({ signal }) =>
    findAllAdvertisements(params, { signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllAdvertisements>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllAdvertisementsQueryResult = NonNullable<Awaited<ReturnType<typeof findAllAdvertisements>>>
export type FindAllAdvertisementsQueryError = SwaggerBadRequestDto

export function useFindAllAdvertisements<
  TData = Awaited<ReturnType<typeof findAllAdvertisements>>,
  TError = SwaggerBadRequestDto,
>(
  params: undefined | FindAllAdvertisementsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisements>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllAdvertisements>>,
          TError,
          Awaited<ReturnType<typeof findAllAdvertisements>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllAdvertisements<
  TData = Awaited<ReturnType<typeof findAllAdvertisements>>,
  TError = SwaggerBadRequestDto,
>(
  params?: FindAllAdvertisementsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisements>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllAdvertisements>>,
          TError,
          Awaited<ReturnType<typeof findAllAdvertisements>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllAdvertisements<
  TData = Awaited<ReturnType<typeof findAllAdvertisements>>,
  TError = SwaggerBadRequestDto,
>(
  params?: FindAllAdvertisementsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllAdvertisements<
  TData = Awaited<ReturnType<typeof findAllAdvertisements>>,
  TError = SwaggerBadRequestDto,
>(
  params?: FindAllAdvertisementsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllAdvertisements>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllAdvertisementsQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAllSoldAdsUrl = (params: FindAllSoldAdsParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  return normalizedParams.size ? `/advertisement/sold-ads?${normalizedParams.toString()}` : `/advertisement/sold-ads`
}

export const findAllSoldAds = async (
  params: FindAllSoldAdsParams,
  options?: RequestInit,
): Promise<FindAllSoldAdsResponseDto> => {
  return customFetch<FindAllSoldAdsResponseDto>(getFindAllSoldAdsUrl(params), {
    ...options,
    method: 'GET',
  })
}

export const getFindAllSoldAdsQueryKey = (params: FindAllSoldAdsParams) => {
  return [`/advertisement/sold-ads`, ...(params ? [params] : [])] as const
}

export const getFindAllSoldAdsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof findAllSoldAds>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params: FindAllSoldAdsParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllSoldAds>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllSoldAdsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllSoldAds>>> = ({ signal }) =>
    findAllSoldAds(params, { signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof findAllSoldAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllSoldAdsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof findAllSoldAds>>>
export type FindAllSoldAdsInfiniteQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAllSoldAdsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllSoldAds>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params: FindAllSoldAdsParams,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllSoldAds>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllSoldAds>>,
          TError,
          Awaited<ReturnType<typeof findAllSoldAds>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllSoldAdsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllSoldAds>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params: FindAllSoldAdsParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllSoldAds>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllSoldAds>>,
          TError,
          Awaited<ReturnType<typeof findAllSoldAds>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllSoldAdsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllSoldAds>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params: FindAllSoldAdsParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllSoldAds>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllSoldAdsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof findAllSoldAds>>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params: FindAllSoldAdsParams,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof findAllSoldAds>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllSoldAdsInfiniteQueryOptions(params, options)

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindAllSoldAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof findAllSoldAds>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params: FindAllSoldAdsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllSoldAds>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindAllSoldAdsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllSoldAds>>> = ({ signal }) =>
    findAllSoldAds(params, { signal, ...requestOptions })

  return { queryKey, queryFn, networkMode: 'always', ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findAllSoldAds>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllSoldAdsQueryResult = NonNullable<Awaited<ReturnType<typeof findAllSoldAds>>>
export type FindAllSoldAdsQueryError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export function useFindAllSoldAds<
  TData = Awaited<ReturnType<typeof findAllSoldAds>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params: FindAllSoldAdsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllSoldAds>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllSoldAds>>,
          TError,
          Awaited<ReturnType<typeof findAllSoldAds>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllSoldAds<
  TData = Awaited<ReturnType<typeof findAllSoldAds>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params: FindAllSoldAdsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllSoldAds>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllSoldAds>>,
          TError,
          Awaited<ReturnType<typeof findAllSoldAds>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllSoldAds<
  TData = Awaited<ReturnType<typeof findAllSoldAds>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params: FindAllSoldAdsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllSoldAds>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllSoldAds<
  TData = Awaited<ReturnType<typeof findAllSoldAds>>,
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
>(
  params: FindAllSoldAdsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllSoldAds>>, TError, TData>>
    request?: SecondParameter<typeof customFetch>
  },
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getFindAllSoldAdsQueryOptions(params, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getUpdateAdvertisementUrl = (id: string) => {
  return `/advertisement/update/${id}`
}

export const updateAdvertisement = async (
  id: string,
  updateAdDTO: UpdateAdDTO,
  options?: RequestInit,
): Promise<MinimalAdvertisementDetailsDto> => {
  return customFetch<MinimalAdvertisementDetailsDto>(getUpdateAdvertisementUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateAdDTO),
  })
}

export const getUpdateAdvertisementMutationOptions = <
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAdvertisement>>,
    TError,
    { id: string; data: UpdateAdDTO },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAdvertisement>>,
  TError,
  { id: string; data: UpdateAdDTO },
  TContext
> => {
  const mutationKey = ['updateAdvertisement']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAdvertisement>>,
    { id: string; data: UpdateAdDTO }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateAdvertisement(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateAdvertisementMutationResult = NonNullable<Awaited<ReturnType<typeof updateAdvertisement>>>
export type UpdateAdvertisementMutationBody = UpdateAdDTO
export type UpdateAdvertisementMutationError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export const useUpdateAdvertisement = <
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAdvertisement>>,
    TError,
    { id: string; data: UpdateAdDTO },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationResult<
  Awaited<ReturnType<typeof updateAdvertisement>>,
  TError,
  { id: string; data: UpdateAdDTO },
  TContext
> => {
  const mutationOptions = getUpdateAdvertisementMutationOptions(options)

  return useMutation(mutationOptions)
}
export const getUpdateSalePriceByAdvertisementUrl = (id: string) => {
  return `/advertisement/update/sale-price/${id}`
}

export const updateSalePriceByAdvertisement = async (
  id: string,
  updateSalePriceDTO: UpdateSalePriceDTO,
  options?: RequestInit,
): Promise<string> => {
  return customFetch<string>(getUpdateSalePriceByAdvertisementUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateSalePriceDTO),
  })
}

export const getUpdateSalePriceByAdvertisementMutationOptions = <
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSalePriceByAdvertisement>>,
    TError,
    { id: string; data: UpdateSalePriceDTO },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateSalePriceByAdvertisement>>,
  TError,
  { id: string; data: UpdateSalePriceDTO },
  TContext
> => {
  const mutationKey = ['updateSalePriceByAdvertisement']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateSalePriceByAdvertisement>>,
    { id: string; data: UpdateSalePriceDTO }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateSalePriceByAdvertisement(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateSalePriceByAdvertisementMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateSalePriceByAdvertisement>>
>
export type UpdateSalePriceByAdvertisementMutationBody = UpdateSalePriceDTO
export type UpdateSalePriceByAdvertisementMutationError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto

export const useUpdateSalePriceByAdvertisement = <
  TError = SwaggerBadRequestDto | SwaggerResourceNotFoundDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSalePriceByAdvertisement>>,
    TError,
    { id: string; data: UpdateSalePriceDTO },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationResult<
  Awaited<ReturnType<typeof updateSalePriceByAdvertisement>>,
  TError,
  { id: string; data: UpdateSalePriceDTO },
  TContext
> => {
  const mutationOptions = getUpdateSalePriceByAdvertisementMutationOptions(options)

  return useMutation(mutationOptions)
}
